<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/CHAT_FEATURE_IMPLEMENTATION.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/CHAT_FEATURE_IMPLEMENTATION.md" />
              <option name="updatedContent" value="# Chat Feature Implementation Summary&#10;&#10;## Overview&#10;A simple chat messaging system has been implemented between landlords and tenants using AJAX polling (auto-refresh every 3 seconds).&#10;&#10;## Database Changes&#10;- **Database Version**: Updated from 4 to 5&#10;- **New Table**: `messages` with the following fields:&#10;  - `m_id`: Auto-incrementing primary key&#10;  - `m_landlord_id`: Reference to landlord&#10;  - `m_tenant_id`: Reference to tenant&#10;  - `m_sender_type`: Either 'landlord' or 'tenant'&#10;  - `m_message`: The message text&#10;  - `m_timestamp`: Unix timestamp&#10;  - `m_is_read`: Boolean (0 or 1)&#10;&#10;## New Files Created&#10;&#10;### DAO Layer&#10;- **MessageDAO.java**: Handles all message database operations&#10;  - `sendMessage()`: Insert new message&#10;  - `getConversation()`: Get all messages between landlord and tenant&#10;  - `getTenantsWhoMessaged()`: Get list of tenants who sent messages to a landlord&#10;  - `markAsRead()`: Mark messages as read&#10;  - `getUnreadCount()`: Get count of unread messages&#10;&#10;### Model Classes&#10;- **Message.java**: Model class for message data&#10;&#10;### Activities&#10;&#10;#### For Tenants:&#10;- **TenantChatActivity.java**: Direct chat with landlord&#10;  - Displays conversation with their landlord&#10;  - Text input field to send messages&#10;  - Auto-refreshes every 3 seconds (polling)&#10;  - Automatically marks received messages as read&#10;&#10;#### For Landlords:&#10;- **LandlordMessagesActivity.java**: List of tenants who messaged&#10;  - Shows all tenants who have sent messages&#10;  - Ordered by most recent message first&#10;  - Click on a tenant to open chat&#10;&#10;- **LandlordChatActivity.java**: Chat with specific tenant&#10;  - Displays conversation with selected tenant&#10;  - Text input field to send messages&#10;  - Auto-refreshes every 3 seconds (polling)&#10;  - Automatically marks received messages as read&#10;&#10;### Adapters&#10;- **MessageAdapter.java**: Displays messages in chat view&#10;  - Sent messages appear on right (blue background)&#10;  - Received messages appear on left (dark background)&#10;  - Shows timestamp for each message&#10;&#10;- **TenantListAdapter.java**: Displays list of tenants for landlord&#10;&#10;### Layouts&#10;- **activity_tenant_chat.xml**: Tenant chat screen&#10;- **activity_landlord_messages.xml**: Landlord messages list&#10;- **activity_landlord_chat.xml**: Landlord chat screen&#10;- **item_message.xml**: Individual message bubble&#10;- **item_tenant_message.xml**: Tenant item in list&#10;&#10;## Dashboard Integration&#10;&#10;### Tenant Dashboard&#10;- Added **&quot;Message Landlord&quot;** card (purple color)&#10;- Clicking opens direct chat with their landlord&#10;&#10;### Landlord/Owner Dashboard&#10;- Added **&quot;Messages&quot;** card (purple color)&#10;- Clicking opens list of tenants who sent messages&#10;- Can then select a tenant to chat with&#10;&#10;## How It Works&#10;&#10;### For Tenants:&#10;1. Login as tenant&#10;2. Click &quot;Message Landlord&quot; card on dashboard&#10;3. Type message and click &quot;Send&quot;&#10;4. Messages appear in real-time (polling every 3 seconds)&#10;5. Can see landlord's replies automatically&#10;&#10;### For Landlords:&#10;1. Login as landlord&#10;2. Click &quot;Messages&quot; card on dashboard&#10;3. See list of all tenants who have messaged&#10;4. Click on a tenant's name to open chat&#10;5. Type message and click &quot;Send&quot;&#10;6. Messages appear in real-time (polling every 3 seconds)&#10;&#10;## Key Features&#10;- ✅ Simple and clean UI&#10;- ✅ Real-time updates using polling (every 3 seconds)&#10;- ✅ Message bubbles (sent vs received)&#10;- ✅ Timestamps on all messages&#10;- ✅ Auto-scroll to latest message&#10;- ✅ Read/unread message tracking&#10;- ✅ Professional Material Design cards&#10;- ✅ Consistent color scheme with app&#10;&#10;## No Merge Conflicts&#10;- All changes are **NEW functions/files**&#10;- No existing functions were modified&#10;- Only new code added to:&#10;  - `TenantDAO.java`: Added `getLandlordIdForTenant()` method&#10;  - `DatabaseHelper.java`: Added messages table constants and creation&#10;  - `TenantDashboardActivity.java`: Added new card variable and listener&#10;  - `OwnerDashboardActivity.java`: Added new card variable and listener&#10;  - Dashboard layouts: Added new cards&#10;  - `AndroidManifest.xml`: Registered new activities&#10;&#10;## Testing Instructions&#10;1. Clean and rebuild the app: `.\gradlew clean build`&#10;2. Install on device/emulator&#10;3. Create a landlord account&#10;4. Create a property for that landlord&#10;5. Create a tenant account assigned to that property&#10;6. Login as tenant → Click &quot;Message Landlord&quot; → Send a message&#10;7. Login as landlord → Click &quot;Messages&quot; → See the tenant in list&#10;8. Click tenant name → Reply to the message&#10;9. Both sides will auto-update every 3 seconds&#10;&#10;## Notes&#10;- Polling interval is 3 seconds (adjustable in code)&#10;- Messages persist across app restarts (stored in SQLite)&#10;- Database version bumped to 5 (will trigger schema update)&#10;- All foreign keys properly set up with cascade rules&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/AndroidManifest.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/AndroidManifest.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;&#10;&#10;    &lt;application&#10;        android:allowBackup=&quot;true&quot;&#10;        android:icon=&quot;@mipmap/ic_launcher&quot;&#10;        android:label=&quot;@string/app_name&quot;&#10;        android:roundIcon=&quot;@mipmap/ic_launcher_round&quot;&#10;        android:supportsRtl=&quot;true&quot;&#10;        android:theme=&quot;@style/Theme.BhaloBariwala&quot;&gt;&#10;&#10;        &lt;activity&#10;            android:name=&quot;.ui.owner.OwnerProfileActivity&quot;&#10;            android:exported=&quot;false&quot; /&gt;&#10;        &lt;activity&#10;            android:name=&quot;.ui.owner.ComplaintsActivity&quot;&#10;            android:exported=&quot;false&quot; /&gt;&#10;        &lt;activity&#10;            android:name=&quot;.ui.owner.RentCheckActivity&quot;&#10;            android:exported=&quot;false&quot; /&gt;&#10;&#10;        &lt;!-- Properties list screen --&gt;&#10;        &lt;activity&#10;            android:name=&quot;.ui.owner.PropertiesActivity&quot;&#10;            android:exported=&quot;false&quot; /&gt;&#10;        &lt;!-- Add property screen (MUST be declared so FAB can launch) --&gt;&#10;        &lt;activity&#10;            android:name=&quot;.ui.owner.AddPropertyActivity&quot;&#10;            android:exported=&quot;false&quot; /&gt;&#10;&#10;        &lt;activity&#10;            android:name=&quot;.ui.tenant.TenantDirectoryActivity&quot;&#10;            android:exported=&quot;false&quot; /&gt;&#10;        &lt;activity&#10;            android:name=&quot;.ui.tenant.TenantComplaintsActivity&quot;&#10;            android:exported=&quot;false&quot; /&gt;&#10;        &lt;activity&#10;            android:name=&quot;.ui.tenant.TenantProfileActivity&quot;&#10;            android:exported=&quot;false&quot; /&gt;&#10;&#10;        &lt;activity&#10;            android:name=&quot;.MainActivity&quot;&#10;            android:exported=&quot;true&quot;&gt;&#10;            &lt;intent-filter&gt;&#10;                &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;&#10;                &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;&#10;            &lt;/intent-filter&gt;&#10;        &lt;/activity&gt;&#10;&#10;        &lt;activity&#10;            android:name=&quot;.SignUpActivity&quot;&#10;            android:exported=&quot;true&quot; /&gt;&#10;        &lt;activity&#10;            android:name=&quot;.ui.login.LoginActivity&quot;&#10;            android:exported=&quot;true&quot; /&gt;&#10;&#10;        &lt;activity android:name=&quot;.ui.owner.OwnerDashboardActivity&quot; /&gt;&#10;        &lt;activity android:name=&quot;.ui.tenant.TenantDashboardActivity&quot; /&gt;&#10;    &lt;/application&gt;&#10;&#10;&lt;/manifest&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#13;&#10;&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;&#13;&#10;&#13;&#10;    &lt;application&#13;&#10;        android:allowBackup=&quot;true&quot;&#13;&#10;        android:icon=&quot;@mipmap/ic_launcher&quot;&#13;&#10;        android:label=&quot;@string/app_name&quot;&#13;&#10;        android:roundIcon=&quot;@mipmap/ic_launcher_round&quot;&#13;&#10;        android:supportsRtl=&quot;true&quot;&#13;&#10;        android:theme=&quot;@style/Theme.BhaloBariwala&quot;&gt;&#13;&#10;&#13;&#10;        &lt;activity&#13;&#10;            android:name=&quot;.ui.owner.OwnerProfileActivity&quot;&#13;&#10;            android:exported=&quot;false&quot; /&gt;&#13;&#10;        &lt;activity&#13;&#10;            android:name=&quot;.ui.owner.ComplaintsActivity&quot;&#13;&#10;            android:exported=&quot;false&quot; /&gt;&#13;&#10;        &lt;activity&#13;&#10;            android:name=&quot;.ui.owner.RentCheckActivity&quot;&#13;&#10;            android:exported=&quot;false&quot; /&gt;&#13;&#10;&#13;&#10;        &lt;!-- Properties list screen --&gt;&#13;&#10;        &lt;activity&#13;&#10;            android:name=&quot;.ui.owner.PropertiesActivity&quot;&#13;&#10;            android:exported=&quot;false&quot; /&gt;&#13;&#10;        &lt;!-- Add property screen (MUST be declared so FAB can launch) --&gt;&#13;&#10;        &lt;activity&#13;&#10;            android:name=&quot;.ui.owner.AddPropertyActivity&quot;&#13;&#10;            android:exported=&quot;false&quot; /&gt;&#13;&#10;&#13;&#10;        &lt;activity&#13;&#10;            android:name=&quot;.ui.tenant.TenantDirectoryActivity&quot;&#13;&#10;            android:exported=&quot;false&quot; /&gt;&#13;&#10;        &lt;activity&#13;&#10;            android:name=&quot;.ui.tenant.TenantComplaintsActivity&quot;&#13;&#10;            android:exported=&quot;false&quot; /&gt;&#13;&#10;        &lt;activity&#13;&#10;            android:name=&quot;.ui.tenant.TenantProfileActivity&quot;&#13;&#10;            android:exported=&quot;false&quot; /&gt;&#13;&#10;&#13;&#10;        &lt;!-- NEW: Chat Activities --&gt;&#13;&#10;        &lt;activity&#13;&#10;            android:name=&quot;.ui.chat.TenantChatActivity&quot;&#13;&#10;            android:exported=&quot;false&quot; /&gt;&#13;&#10;        &lt;activity&#13;&#10;            android:name=&quot;.ui.chat.LandlordMessagesActivity&quot;&#13;&#10;            android:exported=&quot;false&quot; /&gt;&#13;&#10;        &lt;activity&#13;&#10;            android:name=&quot;.ui.chat.LandlordChatActivity&quot;&#13;&#10;            android:exported=&quot;false&quot; /&gt;&#13;&#10;&#13;&#10;        &lt;activity&#13;&#10;            android:name=&quot;.MainActivity&quot;&#13;&#10;            android:exported=&quot;true&quot;&gt;&#13;&#10;            &lt;intent-filter&gt;&#13;&#10;                &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;&#13;&#10;                &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;&#13;&#10;            &lt;/intent-filter&gt;&#13;&#10;        &lt;/activity&gt;&#13;&#10;&#13;&#10;        &lt;activity&#13;&#10;            android:name=&quot;.SignUpActivity&quot;&#13;&#10;            android:exported=&quot;true&quot; /&gt;&#13;&#10;        &lt;activity&#13;&#10;            android:name=&quot;.ui.login.LoginActivity&quot;&#13;&#10;            android:exported=&quot;true&quot; /&gt;&#13;&#10;&#13;&#10;        &lt;activity android:name=&quot;.ui.owner.OwnerDashboardActivity&quot; /&gt;&#13;&#10;        &lt;activity android:name=&quot;.ui.tenant.TenantDashboardActivity&quot; /&gt;&#13;&#10;    &lt;/application&gt;&#13;&#10;&#13;&#10;&lt;/manifest&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/bhalobariwala/DatabaseHelper.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/bhalobariwala/DatabaseHelper.java" />
              <option name="originalContent" value="// app/src/main/java/com/example/bhalobariwala/DatabaseHelper.java&#10;package com.example.bhalobariwala;&#10;&#10;import android.content.Context;&#10;import android.database.sqlite.SQLiteDatabase;&#10;import android.database.sqlite.SQLiteOpenHelper;&#10;&#10;public class DatabaseHelper extends SQLiteOpenHelper {&#10;&#10;    // === DB meta ===&#10;    private static final String DATABASE_NAME = &quot;bhalobariwala.db&quot;;&#10;    // Bump when schema changes&#10;    private static final int DATABASE_VERSION = 4;&#10;&#10;    // === LANDLORD ===&#10;    public static final String T_LANDLORD   = &quot;landlord&quot;;&#10;    public static final String L_ID         = &quot;l_id&quot;;&#10;    public static final String L_NAME       = &quot;l_name&quot;;&#10;    public static final String L_CONTACT    = &quot;l_contact&quot;;&#10;    public static final String L_EMAIL      = &quot;l_email&quot;;&#10;    public static final String L_PWD_HASH   = &quot;l_password_hash&quot;;&#10;    public static final String L_SALT       = &quot;l_salt&quot;;&#10;    public static final String L_CREATED    = &quot;l_created&quot;;&#10;&#10;    // === TENANT ===&#10;    public static final String T_TENANT     = &quot;tenant&quot;;&#10;    public static final String T_ID         = &quot;t_id&quot;;&#10;    public static final String T_NAME       = &quot;t_name&quot;;&#10;    public static final String T_CONTACT    = &quot;t_contact&quot;;&#10;    public static final String T_EMAIL      = &quot;t_email&quot;;&#10;    public static final String T_PWD_HASH   = &quot;t_password_hash&quot;;&#10;    public static final String T_SALT       = &quot;t_salt&quot;;&#10;    public static final String T_CREATED    = &quot;t_created&quot;;&#10;    // Relations (nullable at signup)&#10;    public static final String T_PROP_ID    = &quot;t_prop_id&quot;;  // -&gt; property.prop_id&#10;    public static final String T_APT_ID     = &quot;t_apt_id&quot;;   // -&gt; apartment.apt_id (1:1 idea)&#10;    public static final String T_LID        = &quot;t_lid&quot;;      // -&gt; landlord.l_id&#10;&#10;    // === PROPERTY ===&#10;    public static final String T_PROPERTY   = &quot;property&quot;;&#10;    public static final String P_ID         = &quot;prop_id&quot;;&#10;    public static final String P_NAME       = &quot;prop_name&quot;;&#10;    public static final String P_LANDLORDID = &quot;landlord_id&quot;; // -&gt; landlord.l_id&#10;&#10;    // === APARTMENT ===&#10;    public static final String T_APARTMENT  = &quot;apartment&quot;;&#10;    public static final String A_ID         = &quot;apt_id&quot;;&#10;    public static final String A_PROP_ID    = &quot;a_prop_id&quot;; // -&gt; property.prop_id&#10;    public static final String A_RENT       = &quot;a_rent&quot;;&#10;&#10;    // === COMPLAINTS ===&#10;    public static final String T_COMPLAINTS = &quot;complaints&quot;;&#10;    public static final String C_ID         = &quot;c_id&quot;;&#10;    public static final String C_TITLE      = &quot;c_title&quot;;&#10;    public static final String C_DESC       = &quot;c_desc&quot;;&#10;    public static final String C_TID        = &quot;c_tid&quot;;   // -&gt; tenant.t_id&#10;    public static final String C_TYPE       = &quot;c_type&quot;;  // {electricity, gas, water, security, maintenance}&#10;&#10;    public DatabaseHelper(Context context) {&#10;        super(context, DATABASE_NAME, null, DATABASE_VERSION);&#10;    }&#10;&#10;    // Turn on foreign key enforcement&#10;    @Override&#10;    public void onConfigure(SQLiteDatabase db) {&#10;        super.onConfigure(db);&#10;        db.setForeignKeyConstraintsEnabled(true); // same as PRAGMA foreign_keys=ON&#10;    }&#10;&#10;    @Override&#10;    public void onCreate(SQLiteDatabase db) {&#10;        // --- Landlord table ---&#10;        db.execSQL(&#10;                &quot;CREATE TABLE &quot; + T_LANDLORD + &quot; (&quot; +&#10;                        L_ID + &quot; INTEGER PRIMARY KEY AUTOINCREMENT, &quot; +&#10;                        L_NAME + &quot; TEXT NOT NULL, &quot; +&#10;                        L_CONTACT + &quot; TEXT, &quot; +&#10;                        L_EMAIL + &quot; TEXT NOT NULL UNIQUE, &quot; +&#10;                        L_PWD_HASH + &quot; TEXT NOT NULL, &quot; +&#10;                        L_SALT + &quot; TEXT NOT NULL, &quot; +&#10;                        L_CREATED + &quot; INTEGER NOT NULL&quot; +&#10;                        &quot;)&quot;&#10;        );&#10;&#10;        // --- Tenant table ---&#10;        db.execSQL(&#10;                &quot;CREATE TABLE &quot; + T_TENANT + &quot; (&quot; +&#10;                        T_ID + &quot; INTEGER PRIMARY KEY AUTOINCREMENT, &quot; +&#10;                        T_NAME + &quot; TEXT NOT NULL, &quot; +&#10;                        T_CONTACT + &quot; TEXT, &quot; +&#10;                        T_EMAIL + &quot; TEXT NOT NULL UNIQUE, &quot; +&#10;                        T_PWD_HASH + &quot; TEXT NOT NULL, &quot; +&#10;                        T_SALT + &quot; TEXT NOT NULL, &quot; +&#10;                        T_CREATED + &quot; INTEGER NOT NULL, &quot; +&#10;                        T_PROP_ID + &quot; INTEGER, &quot; +&#10;                        T_APT_ID + &quot; INTEGER UNIQUE, &quot; +  // 1:1-ish (each apt linked to at most one tenant)&#10;&#10;                        &quot;FOREIGN KEY(&quot; + T_PROP_ID + &quot;) REFERENCES &quot; + T_PROPERTY + &quot;(&quot; + P_ID + &quot;) ON UPDATE CASCADE ON DELETE SET NULL, &quot; +&#10;                        &quot;FOREIGN KEY(&quot; + T_APT_ID + &quot;) REFERENCES &quot; + T_APARTMENT + &quot;(&quot; + A_ID + &quot;) ON UPDATE CASCADE ON DELETE SET NULL &quot; +&#10;                        &quot;)&quot;&#10;        );&#10;&#10;        // --- Property table ---&#10;        db.execSQL(&#10;                &quot;CREATE TABLE &quot; + T_PROPERTY + &quot; (&quot; +&#10;                        P_ID + &quot; INTEGER PRIMARY KEY AUTOINCREMENT, &quot; +&#10;                        P_NAME + &quot; TEXT NOT NULL, &quot; +&#10;                        P_LANDLORDID + &quot; INTEGER NOT NULL, &quot; +&#10;                        &quot;FOREIGN KEY(&quot; + P_LANDLORDID + &quot;) REFERENCES &quot; + T_LANDLORD + &quot;(&quot; + L_ID + &quot;) ON UPDATE CASCADE ON DELETE CASCADE&quot; +&#10;                        &quot;)&quot;&#10;        );&#10;&#10;        // --- Apartment table ---&#10;        db.execSQL(&#10;                &quot;CREATE TABLE &quot; + T_APARTMENT + &quot; (&quot; +&#10;                        A_ID + &quot; INTEGER PRIMARY KEY AUTOINCREMENT, &quot; +&#10;                        A_PROP_ID + &quot; INTEGER NOT NULL, &quot; +&#10;                        A_RENT + &quot; REAL NOT NULL, &quot; +&#10;                        &quot;FOREIGN KEY(&quot; + A_PROP_ID + &quot;) REFERENCES &quot; + T_PROPERTY + &quot;(&quot; + P_ID + &quot;) ON UPDATE CASCADE ON DELETE CASCADE&quot; +&#10;                        &quot;)&quot;&#10;        );&#10;&#10;        // --- Complaints table ---&#10;        db.execSQL(&#10;                &quot;CREATE TABLE &quot; + T_COMPLAINTS + &quot; (&quot; +&#10;                        C_ID + &quot; INTEGER PRIMARY KEY AUTOINCREMENT, &quot; +&#10;                        C_TITLE + &quot; TEXT NOT NULL, &quot; +&#10;                        C_DESC + &quot; TEXT, &quot; +&#10;                        C_TID + &quot; INTEGER NOT NULL, &quot; +&#10;                        C_TYPE + &quot; TEXT NOT NULL CHECK(&quot; + C_TYPE + &quot; IN ('electricity','gas','water','security','maintenance')), &quot; +&#10;                        &quot;FOREIGN KEY(&quot; + C_TID + &quot;) REFERENCES &quot; + T_TENANT + &quot;(&quot; + T_ID + &quot;) ON UPDATE CASCADE ON DELETE CASCADE&quot; +&#10;                        &quot;)&quot;&#10;        );&#10;&#10;        // --- Indexes ---&#10;        db.execSQL(&quot;CREATE INDEX IF NOT EXISTS idx_landlord_email ON &quot; + T_LANDLORD + &quot;(&quot; + L_EMAIL + &quot;)&quot;);&#10;        db.execSQL(&quot;CREATE INDEX IF NOT EXISTS idx_tenant_email   ON &quot; + T_TENANT   + &quot;(&quot; + T_EMAIL + &quot;)&quot;);&#10;        db.execSQL(&quot;CREATE INDEX IF NOT EXISTS idx_prop_landlord  ON &quot; + T_PROPERTY + &quot;(&quot; + P_LANDLORDID + &quot;)&quot;);&#10;        db.execSQL(&quot;CREATE INDEX IF NOT EXISTS idx_apt_prop       ON &quot; + T_APARTMENT+ &quot;(&quot; + A_PROP_ID + &quot;)&quot;);&#10;        db.execSQL(&quot;CREATE INDEX IF NOT EXISTS idx_tenant_links   ON &quot; + T_TENANT   + &quot;(&quot; + T_PROP_ID + &quot;,&quot; + T_APT_ID + &quot;)&quot;);&#10;        db.execSQL(&quot;CREATE INDEX IF NOT EXISTS idx_complaints_tid ON &quot; + T_COMPLAINTS+ &quot;(&quot; + C_TID + &quot;)&quot;);&#10;        db.execSQL(&quot;CREATE INDEX IF NOT EXISTS idx_messages_tenant ON &quot; + T_MESSAGES + &quot;(&quot; + M_TENANT_ID + &quot;)&quot;);&#10;        db.execSQL(&quot;CREATE INDEX IF NOT EXISTS idx_messages_landlord ON &quot; + T_MESSAGES + &quot;(&quot; + M_LANDLORD_ID + &quot;)&quot;);&#10;    }&#10;&#10;    @Override&#10;    public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {&#10;        // Because this is a significant schema change (1 users table -&gt; 2 auth tables + domain tables),&#10;        // simplest dev approach: drop and recreate. If you need migration, we can add it later.&#10;        db.execSQL(&quot;PRAGMA foreign_keys=OFF&quot;);&#10;        db.beginTransaction();&#10;            db.execSQL(&quot;DROP TABLE IF EXISTS &quot; + T_APARTMENT);&#10;            db.execSQL(&quot;DROP TABLE IF EXISTS &quot; + T_PROPERTY);&#10;            db.execSQL(&quot;DROP TABLE IF EXISTS &quot; + T_TENANT);&#10;            db.execSQL(&quot;DROP TABLE IF EXISTS &quot; + T_LANDLORD);&#10;            db.execSQL(&quot;DROP TABLE IF EXISTS &quot; + T_MESSAGES);&#10;            onCreate(db);&#10;            db.setTransactionSuccessful();&#10;        } finally {&#10;            db.endTransaction();&#10;            db.execSQL(&quot;PRAGMA foreign_keys=ON&quot;);&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="// app/src/main/java/com/example/bhalobariwala/DatabaseHelper.java&#13;&#10;package com.example.bhalobariwala;&#13;&#10;&#13;&#10;import android.content.Context;&#13;&#10;import android.database.sqlite.SQLiteDatabase;&#13;&#10;import android.database.sqlite.SQLiteOpenHelper;&#13;&#10;&#13;&#10;public class DatabaseHelper extends SQLiteOpenHelper {&#13;&#10;&#13;&#10;    // === DB meta ===&#13;&#10;    private static final String DATABASE_NAME = &quot;bhalobariwala.db&quot;;&#13;&#10;    // Bump when schema changes&#13;&#10;    private static final int DATABASE_VERSION = 5;&#13;&#10;&#13;&#10;    // === LANDLORD ===&#13;&#10;    public static final String T_LANDLORD   = &quot;landlord&quot;;&#13;&#10;    public static final String L_ID         = &quot;l_id&quot;;&#13;&#10;    public static final String L_NAME       = &quot;l_name&quot;;&#13;&#10;    public static final String L_CONTACT    = &quot;l_contact&quot;;&#13;&#10;    public static final String L_EMAIL      = &quot;l_email&quot;;&#13;&#10;    public static final String L_PWD_HASH   = &quot;l_password_hash&quot;;&#13;&#10;    public static final String L_SALT       = &quot;l_salt&quot;;&#13;&#10;    public static final String L_CREATED    = &quot;l_created&quot;;&#13;&#10;&#13;&#10;    // === TENANT ===&#13;&#10;    public static final String T_TENANT     = &quot;tenant&quot;;&#13;&#10;    public static final String T_ID         = &quot;t_id&quot;;&#13;&#10;    public static final String T_NAME       = &quot;t_name&quot;;&#13;&#10;    public static final String T_CONTACT    = &quot;t_contact&quot;;&#13;&#10;    public static final String T_EMAIL      = &quot;t_email&quot;;&#13;&#10;    public static final String T_PWD_HASH   = &quot;t_password_hash&quot;;&#13;&#10;    public static final String T_SALT       = &quot;t_salt&quot;;&#13;&#10;    public static final String T_CREATED    = &quot;t_created&quot;;&#13;&#10;    // Relations (nullable at signup)&#13;&#10;    public static final String T_PROP_ID    = &quot;t_prop_id&quot;;  // -&gt; property.prop_id&#13;&#10;    public static final String T_APT_ID     = &quot;t_apt_id&quot;;   // -&gt; apartment.apt_id (1:1 idea)&#13;&#10;    public static final String T_LID        = &quot;t_lid&quot;;      // -&gt; landlord.l_id&#13;&#10;&#13;&#10;    // === PROPERTY ===&#13;&#10;    public static final String T_PROPERTY   = &quot;property&quot;;&#13;&#10;    public static final String P_ID         = &quot;prop_id&quot;;&#13;&#10;    public static final String P_NAME       = &quot;prop_name&quot;;&#13;&#10;    public static final String P_LANDLORDID = &quot;landlord_id&quot;; // -&gt; landlord.l_id&#13;&#10;&#13;&#10;    // === APARTMENT ===&#13;&#10;    public static final String T_APARTMENT  = &quot;apartment&quot;;&#13;&#10;    public static final String A_ID         = &quot;apt_id&quot;;&#13;&#10;    public static final String A_PROP_ID    = &quot;a_prop_id&quot;; // -&gt; property.prop_id&#13;&#10;    public static final String A_RENT       = &quot;a_rent&quot;;&#13;&#10;&#13;&#10;    // === COMPLAINTS ===&#13;&#10;    public static final String T_COMPLAINTS = &quot;complaints&quot;;&#13;&#10;    public static final String C_ID         = &quot;c_id&quot;;&#13;&#10;    public static final String C_TITLE      = &quot;c_title&quot;;&#13;&#10;    public static final String C_DESC       = &quot;c_desc&quot;;&#13;&#10;    public static final String C_TID        = &quot;c_tid&quot;;   // -&gt; tenant.t_id&#13;&#10;    public static final String C_TYPE       = &quot;c_type&quot;;  // {electricity, gas, water, security, maintenance}&#13;&#10;&#13;&#10;    // === MESSAGES ===&#13;&#10;    public static final String T_MESSAGES   = &quot;messages&quot;;&#13;&#10;    public static final String M_ID         = &quot;m_id&quot;;&#13;&#10;    public static final String M_LANDLORD_ID = &quot;m_landlord_id&quot;;  // -&gt; landlord.l_id&#13;&#10;    public static final String M_TENANT_ID  = &quot;m_tenant_id&quot;;     // -&gt; tenant.t_id&#13;&#10;    public static final String M_SENDER_TYPE = &quot;m_sender_type&quot;;  // 'landlord' or 'tenant'&#13;&#10;    public static final String M_MESSAGE    = &quot;m_message&quot;;&#13;&#10;    public static final String M_TIMESTAMP  = &quot;m_timestamp&quot;;&#13;&#10;    public static final String M_IS_READ    = &quot;m_is_read&quot;;       // 0 or 1&#13;&#10;&#13;&#10;    public DatabaseHelper(Context context) {&#13;&#10;        super(context, DATABASE_NAME, null, DATABASE_VERSION);&#13;&#10;    }&#13;&#10;&#13;&#10;    // Turn on foreign key enforcement&#13;&#10;    @Override&#13;&#10;    public void onConfigure(SQLiteDatabase db) {&#13;&#10;        super.onConfigure(db);&#13;&#10;        db.setForeignKeyConstraintsEnabled(true); // same as PRAGMA foreign_keys=ON&#13;&#10;    }&#13;&#10;&#13;&#10;    @Override&#13;&#10;    public void onCreate(SQLiteDatabase db) {&#13;&#10;        // --- Landlord table ---&#13;&#10;        db.execSQL(&#13;&#10;                &quot;CREATE TABLE &quot; + T_LANDLORD + &quot; (&quot; +&#13;&#10;                        L_ID + &quot; INTEGER PRIMARY KEY AUTOINCREMENT, &quot; +&#13;&#10;                        L_NAME + &quot; TEXT NOT NULL, &quot; +&#13;&#10;                        L_CONTACT + &quot; TEXT, &quot; +&#13;&#10;                        L_EMAIL + &quot; TEXT NOT NULL UNIQUE, &quot; +&#13;&#10;                        L_PWD_HASH + &quot; TEXT NOT NULL, &quot; +&#13;&#10;                        L_SALT + &quot; TEXT NOT NULL, &quot; +&#13;&#10;                        L_CREATED + &quot; INTEGER NOT NULL&quot; +&#13;&#10;                        &quot;)&quot;&#13;&#10;        );&#13;&#10;&#13;&#10;        // --- Tenant table ---&#13;&#10;        db.execSQL(&#13;&#10;                &quot;CREATE TABLE &quot; + T_TENANT + &quot; (&quot; +&#13;&#10;                        T_ID + &quot; INTEGER PRIMARY KEY AUTOINCREMENT, &quot; +&#13;&#10;                        T_NAME + &quot; TEXT NOT NULL, &quot; +&#13;&#10;                        T_CONTACT + &quot; TEXT, &quot; +&#13;&#10;                        T_EMAIL + &quot; TEXT NOT NULL UNIQUE, &quot; +&#13;&#10;                        T_PWD_HASH + &quot; TEXT NOT NULL, &quot; +&#13;&#10;                        T_SALT + &quot; TEXT NOT NULL, &quot; +&#13;&#10;                        T_CREATED + &quot; INTEGER NOT NULL, &quot; +&#13;&#10;                        T_PROP_ID + &quot; INTEGER, &quot; +&#13;&#10;                        T_APT_ID + &quot; INTEGER UNIQUE, &quot; +  // 1:1-ish (each apt linked to at most one tenant)&#13;&#10;&#13;&#10;                        &quot;FOREIGN KEY(&quot; + T_PROP_ID + &quot;) REFERENCES &quot; + T_PROPERTY + &quot;(&quot; + P_ID + &quot;) ON UPDATE CASCADE ON DELETE SET NULL, &quot; +&#13;&#10;                        &quot;FOREIGN KEY(&quot; + T_APT_ID + &quot;) REFERENCES &quot; + T_APARTMENT + &quot;(&quot; + A_ID + &quot;) ON UPDATE CASCADE ON DELETE SET NULL &quot; +&#13;&#10;                        &quot;)&quot;&#13;&#10;        );&#13;&#10;&#13;&#10;        // --- Property table ---&#13;&#10;        db.execSQL(&#13;&#10;                &quot;CREATE TABLE &quot; + T_PROPERTY + &quot; (&quot; +&#13;&#10;                        P_ID + &quot; INTEGER PRIMARY KEY AUTOINCREMENT, &quot; +&#13;&#10;                        P_NAME + &quot; TEXT NOT NULL, &quot; +&#13;&#10;                        P_LANDLORDID + &quot; INTEGER NOT NULL, &quot; +&#13;&#10;                        &quot;FOREIGN KEY(&quot; + P_LANDLORDID + &quot;) REFERENCES &quot; + T_LANDLORD + &quot;(&quot; + L_ID + &quot;) ON UPDATE CASCADE ON DELETE CASCADE&quot; +&#13;&#10;                        &quot;)&quot;&#13;&#10;        );&#13;&#10;&#13;&#10;        // --- Apartment table ---&#13;&#10;        db.execSQL(&#13;&#10;                &quot;CREATE TABLE &quot; + T_APARTMENT + &quot; (&quot; +&#13;&#10;                        A_ID + &quot; INTEGER PRIMARY KEY AUTOINCREMENT, &quot; +&#13;&#10;                        A_PROP_ID + &quot; INTEGER NOT NULL, &quot; +&#13;&#10;                        A_RENT + &quot; REAL NOT NULL, &quot; +&#13;&#10;                        &quot;FOREIGN KEY(&quot; + A_PROP_ID + &quot;) REFERENCES &quot; + T_PROPERTY + &quot;(&quot; + P_ID + &quot;) ON UPDATE CASCADE ON DELETE CASCADE&quot; +&#13;&#10;                        &quot;)&quot;&#13;&#10;        );&#13;&#10;&#13;&#10;        // --- Complaints table ---&#13;&#10;        db.execSQL(&#13;&#10;                &quot;CREATE TABLE &quot; + T_COMPLAINTS + &quot; (&quot; +&#13;&#10;                        C_ID + &quot; INTEGER PRIMARY KEY AUTOINCREMENT, &quot; +&#13;&#10;                        C_TITLE + &quot; TEXT NOT NULL, &quot; +&#13;&#10;                        C_DESC + &quot; TEXT, &quot; +&#13;&#10;                        C_TID + &quot; INTEGER NOT NULL, &quot; +&#13;&#10;                        C_TYPE + &quot; TEXT NOT NULL CHECK(&quot; + C_TYPE + &quot; IN ('electricity','gas','water','security','maintenance')), &quot; +&#13;&#10;                        &quot;FOREIGN KEY(&quot; + C_TID + &quot;) REFERENCES &quot; + T_TENANT + &quot;(&quot; + T_ID + &quot;) ON UPDATE CASCADE ON DELETE CASCADE&quot; +&#13;&#10;                        &quot;)&quot;&#13;&#10;        );&#13;&#10;&#13;&#10;        // --- Messages table ---&#13;&#10;        db.execSQL(&#13;&#10;                &quot;CREATE TABLE &quot; + T_MESSAGES + &quot; (&quot; +&#13;&#10;                        M_ID + &quot; INTEGER PRIMARY KEY AUTOINCREMENT, &quot; +&#13;&#10;                        M_LANDLORD_ID + &quot; INTEGER, &quot; +&#13;&#10;                        M_TENANT_ID + &quot; INTEGER, &quot; +&#13;&#10;                        M_SENDER_TYPE + &quot; TEXT NOT NULL CHECK(&quot; + M_SENDER_TYPE + &quot; IN ('landlord','tenant')), &quot; +&#13;&#10;                        M_MESSAGE + &quot; TEXT NOT NULL, &quot; +&#13;&#10;                        M_TIMESTAMP + &quot; INTEGER NOT NULL, &quot; +&#13;&#10;                        M_IS_READ + &quot; INTEGER NOT NULL CHECK(&quot; + M_IS_READ + &quot; IN (0,1)), &quot; +&#13;&#10;&#13;&#10;                        &quot;FOREIGN KEY(&quot; + M_LANDLORD_ID + &quot;) REFERENCES &quot; + T_LANDLORD + &quot;(&quot; + L_ID + &quot;) ON UPDATE CASCADE ON DELETE SET NULL, &quot; +&#13;&#10;                        &quot;FOREIGN KEY(&quot; + M_TENANT_ID + &quot;) REFERENCES &quot; + T_TENANT + &quot;(&quot; + T_ID + &quot;) ON UPDATE CASCADE ON DELETE SET NULL&quot; +&#13;&#10;                        &quot;)&quot;&#13;&#10;        );&#13;&#10;&#13;&#10;        // --- Indexes ---&#13;&#10;        db.execSQL(&quot;CREATE INDEX IF NOT EXISTS idx_landlord_email ON &quot; + T_LANDLORD + &quot;(&quot; + L_EMAIL + &quot;)&quot;);&#13;&#10;        db.execSQL(&quot;CREATE INDEX IF NOT EXISTS idx_tenant_email   ON &quot; + T_TENANT   + &quot;(&quot; + T_EMAIL + &quot;)&quot;);&#13;&#10;        db.execSQL(&quot;CREATE INDEX IF NOT EXISTS idx_prop_landlord  ON &quot; + T_PROPERTY + &quot;(&quot; + P_LANDLORDID + &quot;)&quot;);&#13;&#10;        db.execSQL(&quot;CREATE INDEX IF NOT EXISTS idx_apt_prop       ON &quot; + T_APARTMENT+ &quot;(&quot; + A_PROP_ID + &quot;)&quot;);&#13;&#10;        db.execSQL(&quot;CREATE INDEX IF NOT EXISTS idx_tenant_links   ON &quot; + T_TENANT   + &quot;(&quot; + T_PROP_ID + &quot;,&quot; + T_APT_ID + &quot;)&quot;);&#13;&#10;        db.execSQL(&quot;CREATE INDEX IF NOT EXISTS idx_complaints_tid ON &quot; + T_COMPLAINTS+ &quot;(&quot; + C_TID + &quot;)&quot;);&#13;&#10;        db.execSQL(&quot;CREATE INDEX IF NOT EXISTS idx_messages_tenant ON &quot; + T_MESSAGES + &quot;(&quot; + M_TENANT_ID + &quot;)&quot;);&#13;&#10;        db.execSQL(&quot;CREATE INDEX IF NOT EXISTS idx_messages_landlord ON &quot; + T_MESSAGES + &quot;(&quot; + M_LANDLORD_ID + &quot;)&quot;);&#13;&#10;    }&#13;&#10;&#13;&#10;    @Override&#13;&#10;    public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {&#13;&#10;        // Because this is a significant schema change (1 users table -&gt; 2 auth tables + domain tables),&#13;&#10;        // simplest dev approach: drop and recreate. If you need migration, we can add it later.&#13;&#10;        db.execSQL(&quot;PRAGMA foreign_keys=OFF&quot;);&#13;&#10;        db.beginTransaction();&#13;&#10;        try {&#13;&#10;            db.execSQL(&quot;DROP TABLE IF EXISTS &quot; + T_COMPLAINTS);&#13;&#10;            db.execSQL(&quot;DROP TABLE IF EXISTS &quot; + T_APARTMENT);&#13;&#10;            db.execSQL(&quot;DROP TABLE IF EXISTS &quot; + T_PROPERTY);&#13;&#10;            db.execSQL(&quot;DROP TABLE IF EXISTS &quot; + T_TENANT);&#13;&#10;            db.execSQL(&quot;DROP TABLE IF EXISTS &quot; + T_LANDLORD);&#13;&#10;            db.execSQL(&quot;DROP TABLE IF EXISTS &quot; + T_MESSAGES);&#13;&#10;            onCreate(db);&#13;&#10;            db.setTransactionSuccessful();&#13;&#10;        } finally {&#13;&#10;            db.endTransaction();&#13;&#10;            db.execSQL(&quot;PRAGMA foreign_keys=ON&quot;);&#13;&#10;        }&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/bhalobariwala/MessageDAO.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/bhalobariwala/MessageDAO.java" />
              <option name="updatedContent" value="package com.example.bhalobariwala;&#10;&#10;import android.content.ContentValues;&#10;import android.content.Context;&#10;import android.database.Cursor;&#10;import android.database.sqlite.SQLiteDatabase;&#10;import android.util.Log;&#10;&#10;public class MessageDAO {&#10;&#10;    private final DatabaseHelper helper;&#10;    private SQLiteDatabase db;&#10;&#10;    public MessageDAO(Context ctx) {&#10;        helper = new DatabaseHelper(ctx);&#10;    }&#10;&#10;    public void open() {&#10;        db = helper.getWritableDatabase();&#10;    }&#10;&#10;    public void close() {&#10;        if (db != null &amp;&amp; db.isOpen()) db.close();&#10;    }&#10;&#10;    /** Send a message */&#10;    public long sendMessage(int landlordId, int tenantId, String senderType, String message) {&#10;        try {&#10;            ContentValues v = new ContentValues();&#10;            v.put(DatabaseHelper.M_LANDLORD_ID, landlordId);&#10;            v.put(DatabaseHelper.M_TENANT_ID, tenantId);&#10;            v.put(DatabaseHelper.M_SENDER_TYPE, senderType);&#10;            v.put(DatabaseHelper.M_MESSAGE, message);&#10;            v.put(DatabaseHelper.M_TIMESTAMP, System.currentTimeMillis());&#10;            v.put(DatabaseHelper.M_IS_READ, 0);&#10;&#10;            long result = db.insert(DatabaseHelper.T_MESSAGES, null, v);&#10;            if (result == -1) {&#10;                Log.e(&quot;MessageDAO&quot;, &quot;Insert failed&quot;);&#10;            }&#10;            return result;&#10;        } catch (Exception e) {&#10;            Log.e(&quot;MessageDAO&quot;, &quot;Exception during message insert&quot;, e);&#10;            return -1;&#10;        }&#10;    }&#10;&#10;    /** Get all messages between a landlord and tenant */&#10;    public Cursor getConversation(int landlordId, int tenantId) {&#10;        return db.query(&#10;                DatabaseHelper.T_MESSAGES,&#10;                null,&#10;                DatabaseHelper.M_LANDLORD_ID + &quot;=? AND &quot; + DatabaseHelper.M_TENANT_ID + &quot;=?&quot;,&#10;                new String[]{String.valueOf(landlordId), String.valueOf(tenantId)},&#10;                null, null,&#10;                DatabaseHelper.M_TIMESTAMP + &quot; ASC&quot;&#10;        );&#10;    }&#10;&#10;    /** Get list of tenants who messaged this landlord */&#10;    public Cursor getTenantsWhoMessaged(int landlordId) {&#10;        String query = &quot;SELECT DISTINCT t.&quot; + DatabaseHelper.T_ID + &quot;, &quot; +&#10;                &quot;t.&quot; + DatabaseHelper.T_NAME + &quot;, &quot; +&#10;                &quot;MAX(m.&quot; + DatabaseHelper.M_TIMESTAMP + &quot;) as last_message_time &quot; +&#10;                &quot;FROM &quot; + DatabaseHelper.T_TENANT + &quot; t &quot; +&#10;                &quot;INNER JOIN &quot; + DatabaseHelper.T_MESSAGES + &quot; m &quot; +&#10;                &quot;ON t.&quot; + DatabaseHelper.T_ID + &quot; = m.&quot; + DatabaseHelper.M_TENANT_ID + &quot; &quot; +&#10;                &quot;WHERE m.&quot; + DatabaseHelper.M_LANDLORD_ID + &quot; = ? &quot; +&#10;                &quot;GROUP BY t.&quot; + DatabaseHelper.T_ID + &quot;, t.&quot; + DatabaseHelper.T_NAME + &quot; &quot; +&#10;                &quot;ORDER BY last_message_time DESC&quot;;&#10;        &#10;        return db.rawQuery(query, new String[]{String.valueOf(landlordId)});&#10;    }&#10;&#10;    /** Mark messages as read */&#10;    public void markAsRead(int landlordId, int tenantId, String readerType) {&#10;        try {&#10;            ContentValues v = new ContentValues();&#10;            v.put(DatabaseHelper.M_IS_READ, 1);&#10;&#10;            String whereClause = DatabaseHelper.M_LANDLORD_ID + &quot;=? AND &quot; + &#10;                                DatabaseHelper.M_TENANT_ID + &quot;=? AND &quot; +&#10;                                DatabaseHelper.M_SENDER_TYPE + &quot;!=?&quot;;&#10;            &#10;            db.update(&#10;                    DatabaseHelper.T_MESSAGES,&#10;                    v,&#10;                    whereClause,&#10;                    new String[]{String.valueOf(landlordId), String.valueOf(tenantId), readerType}&#10;            );&#10;        } catch (Exception e) {&#10;            Log.e(&quot;MessageDAO&quot;, &quot;Exception marking messages as read&quot;, e);&#10;        }&#10;    }&#10;&#10;    /** Get unread message count for a user */&#10;    public int getUnreadCount(int userId, String userType) {&#10;        String whereClause;&#10;        if (userType.equals(&quot;landlord&quot;)) {&#10;            whereClause = DatabaseHelper.M_LANDLORD_ID + &quot;=? AND &quot; + &#10;                         DatabaseHelper.M_SENDER_TYPE + &quot;='tenant' AND &quot; +&#10;                         DatabaseHelper.M_IS_READ + &quot;=0&quot;;&#10;        } else {&#10;            whereClause = DatabaseHelper.M_TENANT_ID + &quot;=? AND &quot; + &#10;                         DatabaseHelper.M_SENDER_TYPE + &quot;='landlord' AND &quot; +&#10;                         DatabaseHelper.M_IS_READ + &quot;=0&quot;;&#10;        }&#10;&#10;        Cursor c = db.query(&#10;                DatabaseHelper.T_MESSAGES,&#10;                new String[]{&quot;COUNT(*)&quot;},&#10;                whereClause,&#10;                new String[]{String.valueOf(userId)},&#10;                null, null, null&#10;        );&#10;&#10;        int count = 0;&#10;        if (c.moveToFirst()) {&#10;            count = c.getInt(0);&#10;        }&#10;        c.close();&#10;        return count;&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/bhalobariwala/TenantDAO.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/bhalobariwala/TenantDAO.java" />
              <option name="originalContent" value="package com.example.bhalobariwala;&#10;&#10;import android.content.ContentValues;&#10;import android.content.Context;&#10;import android.database.Cursor;&#10;import android.database.sqlite.SQLiteDatabase;&#10;import android.util.Log;&#10;&#10;import com.example.bhalobariwala.security.PasswordUtils;&#10;&#10;public class TenantDAO {&#10;&#10;    private final DatabaseHelper helper;&#10;    private SQLiteDatabase db;&#10;&#10;    public TenantDAO(Context ctx) {&#10;        helper = new DatabaseHelper(ctx);&#10;    }&#10;&#10;    public void open() {&#10;        db = helper.getWritableDatabase();&#10;    }&#10;&#10;    public void close() {&#10;        if (db != null &amp;&amp; db.isOpen()) db.close();&#10;    }&#10;&#10;    public boolean emailExists(String email) {&#10;        Cursor c = db.query(&#10;                DatabaseHelper.T_TENANT,&#10;                new String[]{DatabaseHelper.T_ID},&#10;                DatabaseHelper.T_EMAIL + &quot;=?&quot;,&#10;                new String[]{email},&#10;                null, null, null&#10;        );&#10;        boolean exists = c.moveToFirst();&#10;        c.close();&#10;        return exists;&#10;    }&#10;&#10;    public long create(String name, String email, String password, String contact, String propId, String aptId) {&#10;        try {&#10;            String salt = PasswordUtils.generateSalt();&#10;            String hash = PasswordUtils.hash(password, salt);&#10;&#10;            ContentValues v = new ContentValues();&#10;            v.put(DatabaseHelper.T_NAME, name);&#10;            v.put(DatabaseHelper.T_EMAIL, email);&#10;            v.put(DatabaseHelper.T_CONTACT, contact);&#10;            v.put(DatabaseHelper.T_PWD_HASH, hash);&#10;            v.put(DatabaseHelper.T_SALT, salt);&#10;            v.put(DatabaseHelper.T_CREATED, System.currentTimeMillis());&#10;            v.put(DatabaseHelper.T_PROP_ID, propId);&#10;            v.put(DatabaseHelper.T_APT_ID, aptId);&#10;&#10;            long result = db.insert(DatabaseHelper.T_TENANT, null, v);&#10;            if (result == -1) {&#10;                Log.e(&quot;TenantDAO&quot;, &quot;Insert failed for tenant: &quot; + email);&#10;            }&#10;            return result;&#10;        } catch (Exception e) {&#10;            Log.e(&quot;TenantDAO&quot;, &quot;Exception during tenant creation&quot;, e);&#10;            return -1;&#10;        }&#10;    }&#10;&#10;    public int validate(String email, String rawPassword) {&#10;        Cursor c = db.query(&#10;                DatabaseHelper.T_TENANT,&#10;                new String[]{DatabaseHelper.T_ID, DatabaseHelper.T_PWD_HASH, DatabaseHelper.T_SALT},&#10;                DatabaseHelper.T_EMAIL + &quot;=?&quot;,&#10;                new String[]{email},&#10;                null, null, null&#10;        );&#10;&#10;        int id = -1;&#10;        if (c.moveToFirst()) {&#10;            String storedHash = c.getString(1);&#10;            String salt = c.getString(2);&#10;            if (PasswordUtils.hash(rawPassword, salt).equals(storedHash)) {&#10;                id = c.getInt(0); // tenant ID&#10;            }&#10;        }&#10;        c.close();&#10;        return id;&#10;    }&#10;&#10;    /** NEW: Return the tenant's primary key by email, or -1 if not found */&#10;    public long getIdByEmail(String email) {&#10;        long id = -1L;&#10;        Cursor c = db.query(&#10;                DatabaseHelper.T_TENANT,&#10;                new String[]{DatabaseHelper.T_ID},&#10;                DatabaseHelper.T_EMAIL + &quot;=?&quot;,&#10;                new String[]{email},&#10;                null, null, null,&#10;                &quot;1&quot;&#10;        );&#10;        if (c.moveToFirst()) {&#10;            id = c.getLong(0);&#10;        }&#10;        c.close();&#10;        return id;&#10;    }&#10;&#10;    /** OPTIONAL: If you ever need the full row for a tenant by email */&#10;    public Cursor getByEmail(String email) {&#10;        return db.query(&#10;                DatabaseHelper.T_TENANT,&#10;                null,&#10;                DatabaseHelper.T_EMAIL + &quot;=?&quot;,&#10;                new String[]{email},&#10;                null, null, null,&#10;                &quot;1&quot;&#10;        );&#10;    }&#10;&#10;    /** Get tenant by ID */&#10;    public Cursor getTenantById(long tenantId) {&#10;        return db.query(&#10;                DatabaseHelper.T_TENANT,&#10;                null,&#10;                DatabaseHelper.T_ID + &quot;=?&quot;,&#10;                new String[]{String.valueOf(tenantId)},&#10;                null, null, null,&#10;                &quot;1&quot;&#10;        );&#10;    }&#10;&#10;    /** Update tenant information (except password) */&#10;    public boolean updateTenant(long tenantId, String name, String contact, String propId, String aptId) {&#10;        try {&#10;            ContentValues v = new ContentValues();&#10;            v.put(DatabaseHelper.T_NAME, name);&#10;            v.put(DatabaseHelper.T_CONTACT, contact);&#10;            v.put(DatabaseHelper.T_PROP_ID, propId);&#10;            v.put(DatabaseHelper.T_APT_ID, aptId);&#10;&#10;            int rowsAffected = db.update(&#10;                    DatabaseHelper.T_TENANT,&#10;                    v,&#10;                    DatabaseHelper.T_ID + &quot;=?&quot;,&#10;                    new String[]{String.valueOf(tenantId)}&#10;            );&#10;&#10;            if (rowsAffected &gt; 0) {&#10;                Log.d(&quot;TenantDAO&quot;, &quot;Tenant updated successfully: &quot; + tenantId);&#10;                return true;&#10;            } else {&#10;                Log.e(&quot;TenantDAO&quot;, &quot;Update failed for tenant: &quot; + tenantId);&#10;                return false;&#10;            }&#10;        } catch (Exception e) {&#10;            Log.e(&quot;TenantDAO&quot;, &quot;Exception during tenant update&quot;, e);&#10;            return false;&#10;        }&#10;    }&#10;&#10;    /** Update tenant password */&#10;    public boolean updatePassword(long tenantId, String oldPassword, String newPassword) {&#10;        try {&#10;            // First verify old password&#10;            Cursor c = db.query(&#10;                    DatabaseHelper.T_TENANT,&#10;                    new String[]{DatabaseHelper.T_PWD_HASH, DatabaseHelper.T_SALT},&#10;                    DatabaseHelper.T_ID + &quot;=?&quot;,&#10;                    new String[]{String.valueOf(tenantId)},&#10;                    null, null, null&#10;            );&#10;&#10;            if (!c.moveToFirst()) {&#10;                c.close();&#10;                return false;&#10;            }&#10;&#10;            String storedHash = c.getString(0);&#10;            String salt = c.getString(1);&#10;            c.close();&#10;&#10;            // Verify old password&#10;            if (!PasswordUtils.hash(oldPassword, salt).equals(storedHash)) {&#10;                Log.e(&quot;TenantDAO&quot;, &quot;Old password verification failed&quot;);&#10;                return false;&#10;            }&#10;&#10;            // Generate new hash with new salt&#10;            String newSalt = PasswordUtils.generateSalt();&#10;            String newHash = PasswordUtils.hash(newPassword, newSalt);&#10;&#10;            ContentValues v = new ContentValues();&#10;            v.put(DatabaseHelper.T_PWD_HASH, newHash);&#10;            v.put(DatabaseHelper.T_SALT, newSalt);&#10;&#10;            int rowsAffected = db.update(&#10;                    DatabaseHelper.T_TENANT,&#10;                    v,&#10;                    DatabaseHelper.T_ID + &quot;=?&quot;,&#10;                    new String[]{String.valueOf(tenantId)}&#10;            );&#10;&#10;            return rowsAffected &gt; 0;&#10;        } catch (Exception e) {&#10;            Log.e(&quot;TenantDAO&quot;, &quot;Exception during password update&quot;, e);&#10;            return false;&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.bhalobariwala;&#10;&#10;import android.content.ContentValues;&#10;import android.content.Context;&#10;import android.database.Cursor;&#10;import android.database.sqlite.SQLiteDatabase;&#10;import android.util.Log;&#10;&#10;import com.example.bhalobariwala.security.PasswordUtils;&#10;&#10;public class TenantDAO {&#10;&#10;    private final DatabaseHelper helper;&#10;    private SQLiteDatabase db;&#10;&#10;    public TenantDAO(Context ctx) {&#10;        helper = new DatabaseHelper(ctx);&#10;    }&#10;&#10;    public void open() {&#10;        db = helper.getWritableDatabase();&#10;    }&#10;&#10;    public void close() {&#10;        if (db != null &amp;&amp; db.isOpen()) db.close();&#10;    }&#10;&#10;    public boolean emailExists(String email) {&#10;        Cursor c = db.query(&#10;                DatabaseHelper.T_TENANT,&#10;                new String[]{DatabaseHelper.T_ID},&#10;                DatabaseHelper.T_EMAIL + &quot;=?&quot;,&#10;                new String[]{email},&#10;                null, null, null&#10;        );&#10;        boolean exists = c.moveToFirst();&#10;        c.close();&#10;        return exists;&#10;    }&#10;&#10;    public long create(String name, String email, String password, String contact, String propId, String aptId) {&#10;        try {&#10;            String salt = PasswordUtils.generateSalt();&#10;            String hash = PasswordUtils.hash(password, salt);&#10;&#10;            ContentValues v = new ContentValues();&#10;            v.put(DatabaseHelper.T_NAME, name);&#10;            v.put(DatabaseHelper.T_EMAIL, email);&#10;            v.put(DatabaseHelper.T_CONTACT, contact);&#10;            v.put(DatabaseHelper.T_PWD_HASH, hash);&#10;            v.put(DatabaseHelper.T_SALT, salt);&#10;            v.put(DatabaseHelper.T_CREATED, System.currentTimeMillis());&#10;            v.put(DatabaseHelper.T_PROP_ID, propId);&#10;            v.put(DatabaseHelper.T_APT_ID, aptId);&#10;&#10;            long result = db.insert(DatabaseHelper.T_TENANT, null, v);&#10;            if (result == -1) {&#10;                Log.e(&quot;TenantDAO&quot;, &quot;Insert failed for tenant: &quot; + email);&#10;            }&#10;            return result;&#10;        } catch (Exception e) {&#10;            Log.e(&quot;TenantDAO&quot;, &quot;Exception during tenant creation&quot;, e);&#10;            return -1;&#10;        }&#10;    }&#10;&#10;    public int validate(String email, String rawPassword) {&#10;        Cursor c = db.query(&#10;                DatabaseHelper.T_TENANT,&#10;                new String[]{DatabaseHelper.T_ID, DatabaseHelper.T_PWD_HASH, DatabaseHelper.T_SALT},&#10;                DatabaseHelper.T_EMAIL + &quot;=?&quot;,&#10;                new String[]{email},&#10;                null, null, null&#10;        );&#10;&#10;        int id = -1;&#10;        if (c.moveToFirst()) {&#10;            String storedHash = c.getString(1);&#10;            String salt = c.getString(2);&#10;            if (PasswordUtils.hash(rawPassword, salt).equals(storedHash)) {&#10;                id = c.getInt(0); // tenant ID&#10;            }&#10;        }&#10;        c.close();&#10;        return id;&#10;    }&#10;&#10;    /** NEW: Return the tenant's primary key by email, or -1 if not found */&#10;    public long getIdByEmail(String email) {&#10;        long id = -1L;&#10;        Cursor c = db.query(&#10;                DatabaseHelper.T_TENANT,&#10;                new String[]{DatabaseHelper.T_ID},&#10;                DatabaseHelper.T_EMAIL + &quot;=?&quot;,&#10;                new String[]{email},&#10;                null, null, null,&#10;                &quot;1&quot;&#10;        );&#10;        if (c.moveToFirst()) {&#10;            id = c.getLong(0);&#10;        }&#10;        c.close();&#10;        return id;&#10;    }&#10;&#10;    /** OPTIONAL: If you ever need the full row for a tenant by email */&#10;    public Cursor getByEmail(String email) {&#10;        return db.query(&#10;                DatabaseHelper.T_TENANT,&#10;                null,&#10;                DatabaseHelper.T_EMAIL + &quot;=?&quot;,&#10;                new String[]{email},&#10;                null, null, null,&#10;                &quot;1&quot;&#10;        );&#10;    }&#10;&#10;    /** Get tenant by ID */&#10;    public Cursor getTenantById(long tenantId) {&#10;        return db.query(&#10;                DatabaseHelper.T_TENANT,&#10;                null,&#10;                DatabaseHelper.T_ID + &quot;=?&quot;,&#10;                new String[]{String.valueOf(tenantId)},&#10;                null, null, null,&#10;                &quot;1&quot;&#10;        );&#10;    }&#10;&#10;    /** Update tenant information (except password) */&#10;    public boolean updateTenant(long tenantId, String name, String contact, String propId, String aptId) {&#10;        try {&#10;            ContentValues v = new ContentValues();&#10;            v.put(DatabaseHelper.T_NAME, name);&#10;            v.put(DatabaseHelper.T_CONTACT, contact);&#10;            v.put(DatabaseHelper.T_PROP_ID, propId);&#10;            v.put(DatabaseHelper.T_APT_ID, aptId);&#10;&#10;            int rowsAffected = db.update(&#10;                    DatabaseHelper.T_TENANT,&#10;                    v,&#10;                    DatabaseHelper.T_ID + &quot;=?&quot;,&#10;                    new String[]{String.valueOf(tenantId)}&#10;            );&#10;&#10;            if (rowsAffected &gt; 0) {&#10;                Log.d(&quot;TenantDAO&quot;, &quot;Tenant updated successfully: &quot; + tenantId);&#10;                return true;&#10;            } else {&#10;                Log.e(&quot;TenantDAO&quot;, &quot;Update failed for tenant: &quot; + tenantId);&#10;                return false;&#10;            }&#10;        } catch (Exception e) {&#10;            Log.e(&quot;TenantDAO&quot;, &quot;Exception during tenant update&quot;, e);&#10;            return false;&#10;        }&#10;    }&#10;&#10;    /** Update tenant password */&#10;    public boolean updatePassword(long tenantId, String oldPassword, String newPassword) {&#10;        try {&#10;            // First verify old password&#10;            Cursor c = db.query(&#10;                    DatabaseHelper.T_TENANT,&#10;                    new String[]{DatabaseHelper.T_PWD_HASH, DatabaseHelper.T_SALT},&#10;                    DatabaseHelper.T_ID + &quot;=?&quot;,&#10;                    new String[]{String.valueOf(tenantId)},&#10;                    null, null, null&#10;            );&#10;&#10;            if (!c.moveToFirst()) {&#10;                c.close();&#10;                return false;&#10;            }&#10;&#10;            String storedHash = c.getString(0);&#10;            String salt = c.getString(1);&#10;            c.close();&#10;&#10;            // Verify old password&#10;            if (!PasswordUtils.hash(oldPassword, salt).equals(storedHash)) {&#10;                Log.e(&quot;TenantDAO&quot;, &quot;Old password verification failed&quot;);&#10;                return false;&#10;            }&#10;&#10;            // Generate new hash with new salt&#10;            String newSalt = PasswordUtils.generateSalt();&#10;            String newHash = PasswordUtils.hash(newPassword, newSalt);&#10;&#10;            ContentValues v = new ContentValues();&#10;            v.put(DatabaseHelper.T_PWD_HASH, newHash);&#10;            v.put(DatabaseHelper.T_SALT, newSalt);&#10;&#10;            int rowsAffected = db.update(&#10;                    DatabaseHelper.T_TENANT,&#10;                    v,&#10;                    DatabaseHelper.T_ID + &quot;=?&quot;,&#10;                    new String[]{String.valueOf(tenantId)}&#10;            );&#10;&#10;            return rowsAffected &gt; 0;&#10;        } catch (Exception e) {&#10;            Log.e(&quot;TenantDAO&quot;, &quot;Exception during password update&quot;, e);&#10;            return false;&#10;        }&#10;    }&#10;&#10;    /** NEW: Get landlord ID for a tenant by getting it from their property */&#10;    public int getLandlordIdForTenant(long tenantId) {&#10;        String query = &quot;SELECT p.&quot; + DatabaseHelper.P_LANDLORDID + &quot; &quot; +&#10;                &quot;FROM &quot; + DatabaseHelper.T_TENANT + &quot; t &quot; +&#10;                &quot;INNER JOIN &quot; + DatabaseHelper.T_PROPERTY + &quot; p &quot; +&#10;                &quot;ON t.&quot; + DatabaseHelper.T_PROP_ID + &quot; = p.&quot; + DatabaseHelper.P_ID + &quot; &quot; +&#10;                &quot;WHERE t.&quot; + DatabaseHelper.T_ID + &quot; = ?&quot;;&#10;&#10;        Cursor c = db.rawQuery(query, new String[]{String.valueOf(tenantId)});&#10;        int landlordId = -1;&#10;        if (c.moveToFirst()) {&#10;            landlordId = c.getInt(0);&#10;        }&#10;        c.close();&#10;        return landlordId;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/bhalobariwala/model/Message.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/bhalobariwala/model/Message.java" />
              <option name="updatedContent" value="package com.example.bhalobariwala.model;&#10;&#10;public class Message {&#10;    private int id;&#10;    private int landlordId;&#10;    private int tenantId;&#10;    private String senderType;&#10;    private String message;&#10;    private long timestamp;&#10;    private boolean isRead;&#10;&#10;    public Message(int id, int landlordId, int tenantId, String senderType, String message, long timestamp, boolean isRead) {&#10;        this.id = id;&#10;        this.landlordId = landlordId;&#10;        this.tenantId = tenantId;&#10;        this.senderType = senderType;&#10;        this.message = message;&#10;        this.timestamp = timestamp;&#10;        this.isRead = isRead;&#10;    }&#10;&#10;    public int getId() {&#10;        return id;&#10;    }&#10;&#10;    public int getLandlordId() {&#10;        return landlordId;&#10;    }&#10;&#10;    public int getTenantId() {&#10;        return tenantId;&#10;    }&#10;&#10;    public String getSenderType() {&#10;        return senderType;&#10;    }&#10;&#10;    public String getMessage() {&#10;        return message;&#10;    }&#10;&#10;    public long getTimestamp() {&#10;        return timestamp;&#10;    }&#10;&#10;    public boolean isRead() {&#10;        return isRead;&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/bhalobariwala/ui/chat/LandlordChatActivity.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/bhalobariwala/ui/chat/LandlordChatActivity.java" />
              <option name="updatedContent" value="package com.example.bhalobariwala.ui.chat;&#10;&#10;import android.database.Cursor;&#10;import android.os.Bundle;&#10;import android.os.Handler;&#10;import android.widget.Button;&#10;import android.widget.EditText;&#10;import android.widget.TextView;&#10;import android.widget.Toast;&#10;&#10;import androidx.appcompat.app.AppCompatActivity;&#10;import androidx.recyclerview.widget.LinearLayoutManager;&#10;import androidx.recyclerview.widget.RecyclerView;&#10;&#10;import com.example.bhalobariwala.DatabaseHelper;&#10;import com.example.bhalobariwala.MessageDAO;&#10;import com.example.bhalobariwala.R;&#10;import com.example.bhalobariwala.SessionManager;&#10;import com.example.bhalobariwala.model.Message;&#10;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;&#10;public class LandlordChatActivity extends AppCompatActivity {&#10;&#10;    private TextView tvTenantName;&#10;    private RecyclerView rvMessages;&#10;    private EditText etMessage;&#10;    private Button btnSend;&#10;    &#10;    private MessageAdapter adapter;&#10;    private MessageDAO messageDAO;&#10;    private SessionManager sessionManager;&#10;    &#10;    private int landlordId;&#10;    private int tenantId;&#10;    private String tenantName;&#10;    &#10;    private Handler handler = new Handler();&#10;    private Runnable pollingRunnable;&#10;&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        setContentView(R.layout.activity_landlord_chat);&#10;&#10;        // Initialize views&#10;        tvTenantName = findViewById(R.id.tvTenantName);&#10;        rvMessages = findViewById(R.id.rvMessages);&#10;        etMessage = findViewById(R.id.etMessage);&#10;        btnSend = findViewById(R.id.btnSend);&#10;&#10;        // Setup RecyclerView&#10;        rvMessages.setLayoutManager(new LinearLayoutManager(this));&#10;&#10;        // Initialize DAO&#10;        messageDAO = new MessageDAO(this);&#10;        sessionManager = new SessionManager(this);&#10;&#10;        // Get landlord ID&#10;        landlordId = sessionManager.getUserId();&#10;        if (landlordId == -1) {&#10;            Toast.makeText(this, &quot;Session expired&quot;, Toast.LENGTH_SHORT).show();&#10;            finish();&#10;            return;&#10;        }&#10;&#10;        // Get tenant info from intent&#10;        tenantId = getIntent().getIntExtra(&quot;TENANT_ID&quot;, -1);&#10;        tenantName = getIntent().getStringExtra(&quot;TENANT_NAME&quot;);&#10;&#10;        if (tenantId == -1) {&#10;            Toast.makeText(this, &quot;Invalid tenant&quot;, Toast.LENGTH_SHORT).show();&#10;            finish();&#10;            return;&#10;        }&#10;&#10;        tvTenantName.setText(&quot;Chat with &quot; + tenantName);&#10;&#10;        // Load messages&#10;        loadMessages();&#10;&#10;        // Send button&#10;        btnSend.setOnClickListener(v -&gt; sendMessage());&#10;&#10;        // Start polling&#10;        startPolling();&#10;    }&#10;&#10;    private void loadMessages() {&#10;        messageDAO.open();&#10;        &#10;        List&lt;Message&gt; messages = new ArrayList&lt;&gt;();&#10;        Cursor cursor = messageDAO.getConversation(landlordId, tenantId);&#10;&#10;        if (cursor.moveToFirst()) {&#10;            do {&#10;                int id = cursor.getInt(cursor.getColumnIndex(DatabaseHelper.M_ID));&#10;                int landlord = cursor.getInt(cursor.getColumnIndex(DatabaseHelper.M_LANDLORD_ID));&#10;                int tenant = cursor.getInt(cursor.getColumnIndex(DatabaseHelper.M_TENANT_ID));&#10;                String senderType = cursor.getString(cursor.getColumnIndex(DatabaseHelper.M_SENDER_TYPE));&#10;                String msg = cursor.getString(cursor.getColumnIndex(DatabaseHelper.M_MESSAGE));&#10;                long timestamp = cursor.getLong(cursor.getColumnIndex(DatabaseHelper.M_TIMESTAMP));&#10;                boolean isRead = cursor.getInt(cursor.getColumnIndex(DatabaseHelper.M_IS_READ)) == 1;&#10;&#10;                messages.add(new Message(id, landlord, tenant, senderType, msg, timestamp, isRead));&#10;            } while (cursor.moveToNext());&#10;        }&#10;        cursor.close();&#10;&#10;        // Mark messages as read&#10;        messageDAO.markAsRead(landlordId, tenantId, &quot;landlord&quot;);&#10;        messageDAO.close();&#10;&#10;        // Setup adapter&#10;        if (adapter == null) {&#10;            adapter = new MessageAdapter(messages, &quot;landlord&quot;);&#10;            rvMessages.setAdapter(adapter);&#10;        } else {&#10;            adapter.updateMessages(messages);&#10;        }&#10;&#10;        // Scroll to bottom&#10;        if (messages.size() &gt; 0) {&#10;            rvMessages.scrollToPosition(messages.size() - 1);&#10;        }&#10;    }&#10;&#10;    private void sendMessage() {&#10;        String message = etMessage.getText().toString().trim();&#10;        &#10;        if (message.isEmpty()) {&#10;            Toast.makeText(this, &quot;Please enter a message&quot;, Toast.LENGTH_SHORT).show();&#10;            return;&#10;        }&#10;&#10;        messageDAO.open();&#10;        long result = messageDAO.sendMessage(landlordId, tenantId, &quot;landlord&quot;, message);&#10;        messageDAO.close();&#10;&#10;        if (result != -1) {&#10;            etMessage.setText(&quot;&quot;);&#10;            loadMessages();&#10;        } else {&#10;            Toast.makeText(this, &quot;Failed to send message&quot;, Toast.LENGTH_SHORT).show();&#10;        }&#10;    }&#10;&#10;    private void startPolling() {&#10;        pollingRunnable = new Runnable() {&#10;            @Override&#10;            public void run() {&#10;                loadMessages();&#10;                handler.postDelayed(this, 3000); // Poll every 3 seconds&#10;            }&#10;        };&#10;        handler.postDelayed(pollingRunnable, 3000);&#10;    }&#10;&#10;    @Override&#10;    protected void onDestroy() {&#10;        super.onDestroy();&#10;        if (handler != null &amp;&amp; pollingRunnable != null) {&#10;            handler.removeCallbacks(pollingRunnable);&#10;        }&#10;        if (messageDAO != null) {&#10;            messageDAO.close();&#10;        }&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/bhalobariwala/ui/chat/LandlordMessagesActivity.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/bhalobariwala/ui/chat/LandlordMessagesActivity.java" />
              <option name="updatedContent" value="package com.example.bhalobariwala.ui.chat;&#10;&#10;import android.content.Intent;&#10;import android.database.Cursor;&#10;import android.os.Bundle;&#10;import android.view.View;&#10;import android.widget.TextView;&#10;import android.widget.Toast;&#10;&#10;import androidx.appcompat.app.AppCompatActivity;&#10;import androidx.recyclerview.widget.LinearLayoutManager;&#10;import androidx.recyclerview.widget.RecyclerView;&#10;&#10;import com.example.bhalobariwala.DatabaseHelper;&#10;import com.example.bhalobariwala.MessageDAO;&#10;import com.example.bhalobariwala.R;&#10;import com.example.bhalobariwala.SessionManager;&#10;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;&#10;public class LandlordMessagesActivity extends AppCompatActivity {&#10;&#10;    private RecyclerView rvTenants;&#10;    private TextView tvEmpty;&#10;    &#10;    private TenantListAdapter adapter;&#10;    private MessageDAO messageDAO;&#10;    private SessionManager sessionManager;&#10;    &#10;    private int landlordId;&#10;&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        setContentView(R.layout.activity_landlord_messages);&#10;&#10;        // Initialize views&#10;        rvTenants = findViewById(R.id.rvTenants);&#10;        tvEmpty = findViewById(R.id.tvEmpty);&#10;&#10;        // Setup RecyclerView&#10;        rvTenants.setLayoutManager(new LinearLayoutManager(this));&#10;&#10;        // Initialize DAO&#10;        messageDAO = new MessageDAO(this);&#10;        sessionManager = new SessionManager(this);&#10;&#10;        // Get landlord ID&#10;        landlordId = sessionManager.getUserId();&#10;        if (landlordId == -1) {&#10;            Toast.makeText(this, &quot;Session expired&quot;, Toast.LENGTH_SHORT).show();&#10;            finish();&#10;            return;&#10;        }&#10;&#10;        // Load tenants&#10;        loadTenants();&#10;    }&#10;&#10;    private void loadTenants() {&#10;        messageDAO.open();&#10;        &#10;        List&lt;TenantListAdapter.TenantItem&gt; tenants = new ArrayList&lt;&gt;();&#10;        Cursor cursor = messageDAO.getTenantsWhoMessaged(landlordId);&#10;&#10;        if (cursor.moveToFirst()) {&#10;            do {&#10;                int tenantId = cursor.getInt(cursor.getColumnIndex(DatabaseHelper.T_ID));&#10;                String tenantName = cursor.getString(cursor.getColumnIndex(DatabaseHelper.T_NAME));&#10;                &#10;                tenants.add(new TenantListAdapter.TenantItem(tenantId, tenantName));&#10;            } while (cursor.moveToNext());&#10;        }&#10;        cursor.close();&#10;        messageDAO.close();&#10;&#10;        // Show/hide empty view&#10;        if (tenants.isEmpty()) {&#10;            tvEmpty.setVisibility(View.VISIBLE);&#10;            rvTenants.setVisibility(View.GONE);&#10;        } else {&#10;            tvEmpty.setVisibility(View.GONE);&#10;            rvTenants.setVisibility(View.VISIBLE);&#10;        }&#10;&#10;        // Setup adapter&#10;        adapter = new TenantListAdapter(tenants, (tenantId, tenantName) -&gt; {&#10;            // Open chat with this tenant&#10;            Intent intent = new Intent(LandlordMessagesActivity.this, LandlordChatActivity.class);&#10;            intent.putExtra(&quot;TENANT_ID&quot;, tenantId);&#10;            intent.putExtra(&quot;TENANT_NAME&quot;, tenantName);&#10;            startActivity(intent);&#10;        });&#10;        rvTenants.setAdapter(adapter);&#10;    }&#10;&#10;    @Override&#10;    protected void onResume() {&#10;        super.onResume();&#10;        loadTenants();&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/bhalobariwala/ui/chat/MessageAdapter.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/bhalobariwala/ui/chat/MessageAdapter.java" />
              <option name="updatedContent" value="package com.example.bhalobariwala.ui.chat;&#10;&#10;import android.view.LayoutInflater;&#10;import android.view.View;&#10;import android.view.ViewGroup;&#10;import android.widget.LinearLayout;&#10;import android.widget.TextView;&#10;&#10;import androidx.annotation.NonNull;&#10;import androidx.recyclerview.widget.RecyclerView;&#10;&#10;import com.example.bhalobariwala.R;&#10;import com.example.bhalobariwala.model.Message;&#10;&#10;import java.text.SimpleDateFormat;&#10;import java.util.Date;&#10;import java.util.List;&#10;import java.util.Locale;&#10;&#10;public class MessageAdapter extends RecyclerView.Adapter&lt;MessageAdapter.MessageViewHolder&gt; {&#10;&#10;    private List&lt;Message&gt; messages;&#10;    private String currentUserType;&#10;&#10;    public MessageAdapter(List&lt;Message&gt; messages, String currentUserType) {&#10;        this.messages = messages;&#10;        this.currentUserType = currentUserType;&#10;    }&#10;&#10;    @NonNull&#10;    @Override&#10;    public MessageViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {&#10;        View view = LayoutInflater.from(parent.getContext())&#10;                .inflate(R.layout.item_message, parent, false);&#10;        return new MessageViewHolder(view);&#10;    }&#10;&#10;    @Override&#10;    public void onBindViewHolder(@NonNull MessageViewHolder holder, int position) {&#10;        Message message = messages.get(position);&#10;        holder.bind(message, currentUserType);&#10;    }&#10;&#10;    @Override&#10;    public int getItemCount() {&#10;        return messages != null ? messages.size() : 0;&#10;    }&#10;&#10;    public void updateMessages(List&lt;Message&gt; newMessages) {&#10;        this.messages = newMessages;&#10;        notifyDataSetChanged();&#10;    }&#10;&#10;    static class MessageViewHolder extends RecyclerView.ViewHolder {&#10;        LinearLayout layoutSent, layoutReceived;&#10;        TextView tvSentMessage, tvSentTime, tvReceivedMessage, tvReceivedTime;&#10;&#10;        public MessageViewHolder(@NonNull View itemView) {&#10;            super(itemView);&#10;            layoutSent = itemView.findViewById(R.id.layoutSent);&#10;            layoutReceived = itemView.findViewById(R.id.layoutReceived);&#10;            tvSentMessage = itemView.findViewById(R.id.tvSentMessage);&#10;            tvSentTime = itemView.findViewById(R.id.tvSentTime);&#10;            tvReceivedMessage = itemView.findViewById(R.id.tvReceivedMessage);&#10;            tvReceivedTime = itemView.findViewById(R.id.tvReceivedTime);&#10;        }&#10;&#10;        public void bind(Message message, String currentUserType) {&#10;            SimpleDateFormat sdf = new SimpleDateFormat(&quot;hh:mm a&quot;, Locale.getDefault());&#10;            String time = sdf.format(new Date(message.getTimestamp()));&#10;&#10;            boolean isSent = message.getSenderType().equals(currentUserType);&#10;&#10;            if (isSent) {&#10;                layoutSent.setVisibility(View.VISIBLE);&#10;                layoutReceived.setVisibility(View.GONE);&#10;                tvSentMessage.setText(message.getMessage());&#10;                tvSentTime.setText(time);&#10;            } else {&#10;                layoutSent.setVisibility(View.GONE);&#10;                layoutReceived.setVisibility(View.VISIBLE);&#10;                tvReceivedMessage.setText(message.getMessage());&#10;                tvReceivedTime.setText(time);&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/bhalobariwala/ui/chat/TenantChatActivity.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/bhalobariwala/ui/chat/TenantChatActivity.java" />
              <option name="updatedContent" value="package com.example.bhalobariwala.ui.chat;&#10;&#10;import android.database.Cursor;&#10;import android.os.Bundle;&#10;import android.os.Handler;&#10;import android.view.View;&#10;import android.widget.Button;&#10;import android.widget.EditText;&#10;import android.widget.Toast;&#10;&#10;import androidx.appcompat.app.AppCompatActivity;&#10;import androidx.recyclerview.widget.LinearLayoutManager;&#10;import androidx.recyclerview.widget.RecyclerView;&#10;&#10;import com.example.bhalobariwala.DatabaseHelper;&#10;import com.example.bhalobariwala.MessageDAO;&#10;import com.example.bhalobariwala.R;&#10;import com.example.bhalobariwala.SessionManager;&#10;import com.example.bhalobariwala.TenantDAO;&#10;import com.example.bhalobariwala.model.Message;&#10;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;&#10;public class TenantChatActivity extends AppCompatActivity {&#10;&#10;    private RecyclerView rvMessages;&#10;    private EditText etMessage;&#10;    private Button btnSend;&#10;    &#10;    private MessageAdapter adapter;&#10;    private MessageDAO messageDAO;&#10;    private TenantDAO tenantDAO;&#10;    private SessionManager sessionManager;&#10;    &#10;    private int tenantId;&#10;    private int landlordId;&#10;    &#10;    private Handler handler = new Handler();&#10;    private Runnable pollingRunnable;&#10;&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        setContentView(R.layout.activity_tenant_chat);&#10;&#10;        // Initialize views&#10;        rvMessages = findViewById(R.id.rvMessages);&#10;        etMessage = findViewById(R.id.etMessage);&#10;        btnSend = findViewById(R.id.btnSend);&#10;&#10;        // Setup RecyclerView&#10;        rvMessages.setLayoutManager(new LinearLayoutManager(this));&#10;&#10;        // Initialize DAOs&#10;        messageDAO = new MessageDAO(this);&#10;        tenantDAO = new TenantDAO(this);&#10;        sessionManager = new SessionManager(this);&#10;&#10;        // Get tenant ID&#10;        tenantId = sessionManager.getUserId();&#10;        if (tenantId == -1) {&#10;            Toast.makeText(this, &quot;Session expired&quot;, Toast.LENGTH_SHORT).show();&#10;            finish();&#10;            return;&#10;        }&#10;&#10;        // Get landlord ID&#10;        tenantDAO.open();&#10;        landlordId = tenantDAO.getLandlordIdForTenant(tenantId);&#10;        tenantDAO.close();&#10;&#10;        if (landlordId == -1) {&#10;            Toast.makeText(this, &quot;You are not assigned to any landlord&quot;, Toast.LENGTH_SHORT).show();&#10;            finish();&#10;            return;&#10;        }&#10;&#10;        // Load messages&#10;        loadMessages();&#10;&#10;        // Send button&#10;        btnSend.setOnClickListener(v -&gt; sendMessage());&#10;&#10;        // Start polling for new messages&#10;        startPolling();&#10;    }&#10;&#10;    private void loadMessages() {&#10;        messageDAO.open();&#10;        &#10;        List&lt;Message&gt; messages = new ArrayList&lt;&gt;();&#10;        Cursor cursor = messageDAO.getConversation(landlordId, tenantId);&#10;&#10;        if (cursor.moveToFirst()) {&#10;            do {&#10;                int id = cursor.getInt(cursor.getColumnIndex(DatabaseHelper.M_ID));&#10;                int landlord = cursor.getInt(cursor.getColumnIndex(DatabaseHelper.M_LANDLORD_ID));&#10;                int tenant = cursor.getInt(cursor.getColumnIndex(DatabaseHelper.M_TENANT_ID));&#10;                String senderType = cursor.getString(cursor.getColumnIndex(DatabaseHelper.M_SENDER_TYPE));&#10;                String msg = cursor.getString(cursor.getColumnIndex(DatabaseHelper.M_MESSAGE));&#10;                long timestamp = cursor.getLong(cursor.getColumnIndex(DatabaseHelper.M_TIMESTAMP));&#10;                boolean isRead = cursor.getInt(cursor.getColumnIndex(DatabaseHelper.M_IS_READ)) == 1;&#10;&#10;                messages.add(new Message(id, landlord, tenant, senderType, msg, timestamp, isRead));&#10;            } while (cursor.moveToNext());&#10;        }&#10;        cursor.close();&#10;&#10;        // Mark messages as read&#10;        messageDAO.markAsRead(landlordId, tenantId, &quot;tenant&quot;);&#10;        messageDAO.close();&#10;&#10;        // Setup adapter&#10;        if (adapter == null) {&#10;            adapter = new MessageAdapter(messages, &quot;tenant&quot;);&#10;            rvMessages.setAdapter(adapter);&#10;        } else {&#10;            adapter.updateMessages(messages);&#10;        }&#10;&#10;        // Scroll to bottom&#10;        if (messages.size() &gt; 0) {&#10;            rvMessages.scrollToPosition(messages.size() - 1);&#10;        }&#10;    }&#10;&#10;    private void sendMessage() {&#10;        String message = etMessage.getText().toString().trim();&#10;        &#10;        if (message.isEmpty()) {&#10;            Toast.makeText(this, &quot;Please enter a message&quot;, Toast.LENGTH_SHORT).show();&#10;            return;&#10;        }&#10;&#10;        messageDAO.open();&#10;        long result = messageDAO.sendMessage(landlordId, tenantId, &quot;tenant&quot;, message);&#10;        messageDAO.close();&#10;&#10;        if (result != -1) {&#10;            etMessage.setText(&quot;&quot;);&#10;            loadMessages();&#10;        } else {&#10;            Toast.makeText(this, &quot;Failed to send message&quot;, Toast.LENGTH_SHORT).show();&#10;        }&#10;    }&#10;&#10;    private void startPolling() {&#10;        pollingRunnable = new Runnable() {&#10;            @Override&#10;            public void run() {&#10;                loadMessages();&#10;                handler.postDelayed(this, 3000); // Poll every 3 seconds&#10;            }&#10;        };&#10;        handler.postDelayed(pollingRunnable, 3000);&#10;    }&#10;&#10;    @Override&#10;    protected void onDestroy() {&#10;        super.onDestroy();&#10;        if (handler != null &amp;&amp; pollingRunnable != null) {&#10;            handler.removeCallbacks(pollingRunnable);&#10;        }&#10;        if (messageDAO != null) {&#10;            messageDAO.close();&#10;        }&#10;        if (tenantDAO != null) {&#10;            tenantDAO.close();&#10;        }&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/bhalobariwala/ui/chat/TenantListAdapter.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/bhalobariwala/ui/chat/TenantListAdapter.java" />
              <option name="updatedContent" value="package com.example.bhalobariwala.ui.chat;&#10;&#10;import android.view.LayoutInflater;&#10;import android.view.View;&#10;import android.view.ViewGroup;&#10;import android.widget.TextView;&#10;&#10;import androidx.annotation.NonNull;&#10;import androidx.recyclerview.widget.RecyclerView;&#10;&#10;import com.example.bhalobariwala.R;&#10;&#10;import java.util.List;&#10;&#10;public class TenantListAdapter extends RecyclerView.Adapter&lt;TenantListAdapter.TenantViewHolder&gt; {&#10;&#10;    public static class TenantItem {&#10;        public int tenantId;&#10;        public String tenantName;&#10;&#10;        public TenantItem(int tenantId, String tenantName) {&#10;            this.tenantId = tenantId;&#10;            this.tenantName = tenantName;&#10;        }&#10;    }&#10;&#10;    private List&lt;TenantItem&gt; tenants;&#10;    private OnTenantClickListener listener;&#10;&#10;    public interface OnTenantClickListener {&#10;        void onTenantClick(int tenantId, String tenantName);&#10;    }&#10;&#10;    public TenantListAdapter(List&lt;TenantItem&gt; tenants, OnTenantClickListener listener) {&#10;        this.tenants = tenants;&#10;        this.listener = listener;&#10;    }&#10;&#10;    @NonNull&#10;    @Override&#10;    public TenantViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {&#10;        View view = LayoutInflater.from(parent.getContext())&#10;                .inflate(R.layout.item_tenant_message, parent, false);&#10;        return new TenantViewHolder(view);&#10;    }&#10;&#10;    @Override&#10;    public void onBindViewHolder(@NonNull TenantViewHolder holder, int position) {&#10;        TenantItem tenant = tenants.get(position);&#10;        holder.bind(tenant, listener);&#10;    }&#10;&#10;    @Override&#10;    public int getItemCount() {&#10;        return tenants != null ? tenants.size() : 0;&#10;    }&#10;&#10;    static class TenantViewHolder extends RecyclerView.ViewHolder {&#10;        TextView tvTenantName, tvLastMessage;&#10;&#10;        public TenantViewHolder(@NonNull View itemView) {&#10;            super(itemView);&#10;            tvTenantName = itemView.findViewById(R.id.tvTenantName);&#10;            tvLastMessage = itemView.findViewById(R.id.tvLastMessage);&#10;        }&#10;&#10;        public void bind(TenantItem tenant, OnTenantClickListener listener) {&#10;            tvTenantName.setText(tenant.tenantName);&#10;            tvLastMessage.setText(&quot;Tap to view conversation&quot;);&#10;            &#10;            itemView.setOnClickListener(v -&gt; {&#10;                if (listener != null) {&#10;                    listener.onTenantClick(tenant.tenantId, tenant.tenantName);&#10;                }&#10;            });&#10;        }&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/bhalobariwala/ui/owner/OwnerDashboardActivity.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/bhalobariwala/ui/owner/OwnerDashboardActivity.java" />
              <option name="originalContent" value="// app/src/main/java/com/example/bhalobariwala/ui/owner/OwnerDashboardActivity.java&#10;package com.example.bhalobariwala.ui.owner;&#10;&#10;import android.content.Intent;&#10;import android.os.Bundle;&#10;import android.widget.Toast;&#10;&#10;import androidx.appcompat.app.AppCompatActivity;&#10;&#10;import com.example.bhalobariwala.R;&#10;import com.google.android.material.card.MaterialCardView;&#10;&#10;public class OwnerDashboardActivity extends AppCompatActivity {&#10;&#10;    private MaterialCardView cardProperties, cardRentCheck, cardComplaints, cardOwnerProfile;&#10;&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        setContentView(R.layout.activity_owner_dashboard);&#10;&#10;        // Bind views&#10;        cardProperties = findViewById(R.id.cardProperties);&#10;        cardRentCheck = findViewById(R.id.cardRentCheck);&#10;        cardComplaints = findViewById(R.id.cardComplaints);&#10;        cardOwnerProfile = findViewById(R.id.cardOwnerProfile);&#10;&#10;        // Set click listeners&#10;        cardProperties.setOnClickListener(v -&gt;{&#10;                        Toast.makeText(this, &quot;Properties clicked&quot;, Toast.LENGTH_SHORT).show();&#10;                        startActivity(new Intent(this, PropertiesActivity.class));}&#10;        );&#10;&#10;        cardRentCheck.setOnClickListener(v -&gt;{&#10;                        Toast.makeText(this, &quot;Rent Check clicked&quot;, Toast.LENGTH_SHORT).show();&#10;                        startActivity(new Intent(this, RentCheckActivity.class));}&#10;        );&#10;&#10;        cardComplaints.setOnClickListener(v -&gt;{&#10;                        Toast.makeText(this, &quot;Complaints clicked&quot;, Toast.LENGTH_SHORT).show();&#10;                        startActivity(new Intent(this, ComplaintsActivity.class));}&#10;        );&#10;&#10;        cardOwnerProfile.setOnClickListener(v -&gt;{&#10;                        Toast.makeText(this, &quot;Owner Profile clicked&quot;, Toast.LENGTH_SHORT).show();&#10;                        startActivity(new Intent(this, OwnerProfileActivity.class));}&#10;        );&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="// app/src/main/java/com/example/bhalobariwala/ui/owner/OwnerDashboardActivity.java&#13;&#10;package com.example.bhalobariwala.ui.owner;&#13;&#10;&#13;&#10;import android.content.Intent;&#13;&#10;import android.os.Bundle;&#13;&#10;import android.widget.Toast;&#13;&#10;&#13;&#10;import androidx.appcompat.app.AppCompatActivity;&#13;&#10;&#13;&#10;import com.example.bhalobariwala.R;&#13;&#10;import com.google.android.material.card.MaterialCardView;&#13;&#10;&#13;&#10;public class OwnerDashboardActivity extends AppCompatActivity {&#13;&#10;&#13;&#10;    private MaterialCardView cardProperties, cardRentCheck, cardComplaints, cardOwnerProfile;&#13;&#10;    private MaterialCardView cardMessages;&#13;&#10;&#13;&#10;    @Override&#13;&#10;    protected void onCreate(Bundle savedInstanceState) {&#13;&#10;        super.onCreate(savedInstanceState);&#13;&#10;        setContentView(R.layout.activity_owner_dashboard);&#13;&#10;&#13;&#10;        // Bind views&#13;&#10;        cardProperties = findViewById(R.id.cardProperties);&#13;&#10;        cardRentCheck = findViewById(R.id.cardRentCheck);&#13;&#10;        cardComplaints = findViewById(R.id.cardComplaints);&#13;&#10;        cardOwnerProfile = findViewById(R.id.cardOwnerProfile);&#13;&#10;        cardMessages = findViewById(R.id.cardMessages);&#13;&#10;&#13;&#10;        // Set click listeners&#13;&#10;        cardProperties.setOnClickListener(v -&gt;{&#13;&#10;                        Toast.makeText(this, &quot;Properties clicked&quot;, Toast.LENGTH_SHORT).show();&#13;&#10;                        startActivity(new Intent(this, PropertiesActivity.class));}&#13;&#10;        );&#13;&#10;&#13;&#10;        cardRentCheck.setOnClickListener(v -&gt;{&#13;&#10;                        Toast.makeText(this, &quot;Rent Check clicked&quot;, Toast.LENGTH_SHORT).show();&#13;&#10;                        startActivity(new Intent(this, RentCheckActivity.class));}&#13;&#10;        );&#13;&#10;&#13;&#10;        cardComplaints.setOnClickListener(v -&gt;{&#13;&#10;                        Toast.makeText(this, &quot;Complaints clicked&quot;, Toast.LENGTH_SHORT).show();&#13;&#10;                        startActivity(new Intent(this, ComplaintsActivity.class));}&#13;&#10;        );&#13;&#10;&#13;&#10;        cardOwnerProfile.setOnClickListener(v -&gt;{&#13;&#10;                        Toast.makeText(this, &quot;Owner Profile clicked&quot;, Toast.LENGTH_SHORT).show();&#13;&#10;                        startActivity(new Intent(this, OwnerProfileActivity.class));}&#13;&#10;        );&#13;&#10;&#13;&#10;        // NEW: Messages click listener&#13;&#10;        cardMessages.setOnClickListener(v -&gt; {&#13;&#10;                        Toast.makeText(this, &quot;Messages clicked&quot;, Toast.LENGTH_SHORT).show();&#13;&#10;                        startActivity(new Intent(this, com.example.bhalobariwala.ui.chat.LandlordMessagesActivity.class));&#13;&#10;        });&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/bhalobariwala/ui/tenant/TenantDashboardActivity.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/bhalobariwala/ui/tenant/TenantDashboardActivity.java" />
              <option name="originalContent" value="// app/src/main/java/com/example/bhalobariwala/ui/tenant/TenantDashboardActivity.java&#10;package com.example.bhalobariwala.ui.tenant;&#10;&#10;import android.content.Intent;&#10;import android.os.Bundle;&#10;import android.widget.Toast;&#10;&#10;import androidx.appcompat.app.AppCompatActivity;&#10;&#10;import com.example.bhalobariwala.R;&#10;import com.google.android.material.card.MaterialCardView;&#10;&#10;public class TenantDashboardActivity extends AppCompatActivity {&#10;&#10;    private MaterialCardView cardProfile, cardComplaints, cardDirectory;&#10;&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        setContentView(R.layout.activity_tenant_dashboard);&#10;&#10;        // Bind UI&#10;        cardProfile = findViewById(R.id.cardProfile);&#10;        cardComplaints = findViewById(R.id.cardComplaints);&#10;        cardDirectory = findViewById(R.id.cardDirectory);&#10;&#10;        // Click listeners&#10;        cardProfile.setOnClickListener(v -&gt; {&#10;            Toast.makeText(this, &quot;Opening Profile...&quot;, Toast.LENGTH_SHORT).show();&#10;            startActivity(new Intent(this, TenantProfileActivity.class));&#10;        });&#10;&#10;        cardComplaints.setOnClickListener(v -&gt; {&#10;            Toast.makeText(this, &quot;Opening Complaints...&quot;, Toast.LENGTH_SHORT).show();&#10;            startActivity(new Intent(this, TenantComplaintsActivity.class));&#10;        });&#10;&#10;        cardDirectory.setOnClickListener(v -&gt; {&#10;            Toast.makeText(this, &quot;Opening Directory...&quot;, Toast.LENGTH_SHORT).show();&#10;            startActivity(new Intent(this, TenantDirectoryActivity.class));&#10;        });&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="// app/src/main/java/com/example/bhalobariwala/ui/tenant/TenantDashboardActivity.java&#13;&#10;package com.example.bhalobariwala.ui.tenant;&#13;&#10;&#13;&#10;import android.content.Intent;&#13;&#10;import android.os.Bundle;&#13;&#10;import android.widget.Toast;&#13;&#10;&#13;&#10;import androidx.appcompat.app.AppCompatActivity;&#13;&#10;&#13;&#10;import com.example.bhalobariwala.R;&#13;&#10;import com.google.android.material.card.MaterialCardView;&#13;&#10;&#13;&#10;public class TenantDashboardActivity extends AppCompatActivity {&#13;&#10;&#13;&#10;    private MaterialCardView cardProfile, cardComplaints, cardDirectory;&#13;&#10;    private MaterialCardView cardMessageLandlord;&#13;&#10;&#13;&#10;    @Override&#13;&#10;    protected void onCreate(Bundle savedInstanceState) {&#13;&#10;        super.onCreate(savedInstanceState);&#13;&#10;        setContentView(R.layout.activity_tenant_dashboard);&#13;&#10;&#13;&#10;        // Bind UI&#13;&#10;        cardProfile = findViewById(R.id.cardProfile);&#13;&#10;        cardComplaints = findViewById(R.id.cardComplaints);&#13;&#10;        cardDirectory = findViewById(R.id.cardDirectory);&#13;&#10;        cardMessageLandlord = findViewById(R.id.cardMessageLandlord);&#13;&#10;&#13;&#10;        // Click listeners&#13;&#10;        cardProfile.setOnClickListener(v -&gt; {&#13;&#10;            Toast.makeText(this, &quot;Opening Profile...&quot;, Toast.LENGTH_SHORT).show();&#13;&#10;            startActivity(new Intent(this, TenantProfileActivity.class));&#13;&#10;        });&#13;&#10;&#13;&#10;        cardComplaints.setOnClickListener(v -&gt; {&#13;&#10;            Toast.makeText(this, &quot;Opening Complaints...&quot;, Toast.LENGTH_SHORT).show();&#13;&#10;            startActivity(new Intent(this, TenantComplaintsActivity.class));&#13;&#10;        });&#13;&#10;&#13;&#10;        cardDirectory.setOnClickListener(v -&gt; {&#13;&#10;            Toast.makeText(this, &quot;Opening Directory...&quot;, Toast.LENGTH_SHORT).show();&#13;&#10;            startActivity(new Intent(this, TenantDirectoryActivity.class));&#13;&#10;        });&#13;&#10;&#13;&#10;        // NEW: Message landlord click listener&#13;&#10;        cardMessageLandlord.setOnClickListener(v -&gt; {&#13;&#10;            Toast.makeText(this, &quot;Opening Messages...&quot;, Toast.LENGTH_SHORT).show();&#13;&#10;            startActivity(new Intent(this, com.example.bhalobariwala.ui.chat.TenantChatActivity.class));&#13;&#10;        });&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/activity_landlord_chat.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/activity_landlord_chat.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    android:orientation=&quot;vertical&quot;&#10;    android:background=&quot;@color/bb_bg&quot;&gt;&#10;&#10;    &lt;TextView&#10;        android:id=&quot;@+id/tvTenantName&quot;&#10;        android:text=&quot;Chat with Tenant&quot;&#10;        android:textColor=&quot;@color/white&quot;&#10;        android:textStyle=&quot;bold&quot;&#10;        android:textSize=&quot;20sp&quot;&#10;        android:padding=&quot;16dp&quot;&#10;        android:background=&quot;@color/bb_primary&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;/&gt;&#10;&#10;    &lt;androidx.recyclerview.widget.RecyclerView&#10;        android:id=&quot;@+id/rvMessages&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;0dp&quot;&#10;        android:layout_weight=&quot;1&quot;&#10;        android:padding=&quot;8dp&quot;&#10;        android:clipToPadding=&quot;false&quot;/&gt;&#10;&#10;    &lt;LinearLayout&#10;        android:orientation=&quot;horizontal&quot;&#10;        android:padding=&quot;8dp&quot;&#10;        android:background=&quot;@color/bb_card&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&gt;&#10;&#10;        &lt;EditText&#10;            android:id=&quot;@+id/etMessage&quot;&#10;            android:hint=&quot;Type your message...&quot;&#10;            android:textColor=&quot;@color/white&quot;&#10;            android:textColorHint=&quot;#999&quot;&#10;            android:background=&quot;@color/bb_outline&quot;&#10;            android:padding=&quot;12dp&quot;&#10;            android:layout_width=&quot;0dp&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_weight=&quot;1&quot;&#10;            android:layout_marginEnd=&quot;8dp&quot;/&gt;&#10;&#10;        &lt;Button&#10;            android:id=&quot;@+id/btnSend&quot;&#10;            android:text=&quot;Send&quot;&#10;            android:textColor=&quot;@color/bb_on_primary&quot;&#10;            android:backgroundTint=&quot;@color/bb_primary&quot;&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;/&gt;&#10;    &lt;/LinearLayout&gt;&#10;&#10;&lt;/LinearLayout&gt;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/activity_landlord_messages.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/activity_landlord_messages.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    android:orientation=&quot;vertical&quot;&#10;    android:background=&quot;@color/bb_bg&quot;&gt;&#10;&#10;    &lt;TextView&#10;        android:text=&quot;Messages&quot;&#10;        android:textColor=&quot;@color/white&quot;&#10;        android:textStyle=&quot;bold&quot;&#10;        android:textSize=&quot;20sp&quot;&#10;        android:padding=&quot;16dp&quot;&#10;        android:background=&quot;@color/bb_primary&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;/&gt;&#10;&#10;    &lt;TextView&#10;        android:id=&quot;@+id/tvEmpty&quot;&#10;        android:text=&quot;No messages yet&quot;&#10;        android:textColor=&quot;#999&quot;&#10;        android:visibility=&quot;gone&quot;&#10;        android:padding=&quot;16dp&quot;&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;/&gt;&#10;&#10;    &lt;androidx.recyclerview.widget.RecyclerView&#10;        android:id=&quot;@+id/rvTenants&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;match_parent&quot;&#10;        android:padding=&quot;8dp&quot;/&gt;&#10;&#10;&lt;/LinearLayout&gt;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/activity_owner_dashboard.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/activity_owner_dashboard.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;ScrollView xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    android:background=&quot;@color/bb_bg&quot;&#10;    android:padding=&quot;16dp&quot;&gt;&#10;&#10;    &lt;LinearLayout&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:orientation=&quot;vertical&quot;&gt;&#10;&#10;        &lt;!-- Header --&gt;&#10;&#10;        &lt;!-- Properties Section --&gt;&#10;        &lt;com.google.android.material.card.MaterialCardView&#10;            android:id=&quot;@+id/cardProperties&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_marginTop=&quot;16dp&quot;&#10;            app:cardCornerRadius=&quot;12dp&quot;&#10;            app:cardElevation=&quot;6dp&quot;&#10;            android:backgroundTint=&quot;@color/card_blue&quot;&gt;&#10;&#10;            &lt;LinearLayout&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:orientation=&quot;horizontal&quot;&#10;                android:padding=&quot;16dp&quot;&gt;&#10;&#10;                &lt;ImageView&#10;                    android:layout_width=&quot;48dp&quot;&#10;                    android:layout_height=&quot;48dp&quot;&#10;                    android:src=&quot;@drawable/ic_apartment&quot;&#10;                    android:contentDescription=&quot;Properties Icon&quot;&#10;                    android:padding=&quot;8dp&quot; /&gt;&#10;&#10;                &lt;TextView&#10;                    android:layout_width=&quot;wrap_content&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:text=&quot;Properties&quot;&#10;                    android:textSize=&quot;18sp&quot;&#10;                    android:textColor=&quot;@color/bb_on_primary&quot;&#10;                    android:layout_gravity=&quot;center_vertical&quot;&#10;                    android:paddingStart=&quot;16dp&quot; /&gt;&#10;            &lt;/LinearLayout&gt;&#10;        &lt;/com.google.android.material.card.MaterialCardView&gt;&#10;&#10;        &lt;!-- Rent Check Section --&gt;&#10;        &lt;com.google.android.material.card.MaterialCardView&#10;            android:id=&quot;@+id/cardRentCheck&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_marginTop=&quot;16dp&quot;&#10;            app:cardCornerRadius=&quot;12dp&quot;&#10;            app:cardElevation=&quot;6dp&quot;&#10;            android:backgroundTint=&quot;@color/card_orange&quot;&gt;&#10;&#10;            &lt;LinearLayout&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:orientation=&quot;horizontal&quot;&#10;                android:padding=&quot;16dp&quot;&gt;&#10;&#10;                &lt;ImageView&#10;                    android:layout_width=&quot;48dp&quot;&#10;                    android:layout_height=&quot;48dp&quot;&#10;                    android:src=&quot;@drawable/ic_rent&quot;&#10;                    android:contentDescription=&quot;Rent Icon&quot;&#10;                    android:padding=&quot;8dp&quot; /&gt;&#10;&#10;                &lt;TextView&#10;                    android:layout_width=&quot;wrap_content&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:text=&quot;Rent Check&quot;&#10;                    android:textSize=&quot;18sp&quot;&#10;                    android:textColor=&quot;@color/bb_on_primary&quot;&#10;                    android:layout_gravity=&quot;center_vertical&quot;&#10;                    android:paddingStart=&quot;16dp&quot; /&gt;&#10;            &lt;/LinearLayout&gt;&#10;        &lt;/com.google.android.material.card.MaterialCardView&gt;&#10;&#10;        &lt;!-- Complaints Section --&gt;&#10;        &lt;com.google.android.material.card.MaterialCardView&#10;            android:id=&quot;@+id/cardComplaints&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_marginTop=&quot;16dp&quot;&#10;            app:cardCornerRadius=&quot;12dp&quot;&#10;            app:cardElevation=&quot;6dp&quot;&#10;            android:backgroundTint=&quot;@color/card_green&quot;&gt;&#10;&#10;            &lt;LinearLayout&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:orientation=&quot;horizontal&quot;&#10;                android:padding=&quot;16dp&quot;&gt;&#10;&#10;                &lt;ImageView&#10;                    android:layout_width=&quot;48dp&quot;&#10;                    android:layout_height=&quot;48dp&quot;&#10;                    android:src=&quot;@drawable/ic_complaint&quot;&#10;                    android:contentDescription=&quot;Complaints Icon&quot;&#10;                    android:padding=&quot;8dp&quot; /&gt;&#10;&#10;                &lt;TextView&#10;                    android:layout_width=&quot;wrap_content&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:text=&quot;Complaints&quot;&#10;                    android:textSize=&quot;18sp&quot;&#10;                    android:textColor=&quot;@color/bb_on_primary&quot;&#10;                    android:layout_gravity=&quot;center_vertical&quot;&#10;                    android:paddingStart=&quot;16dp&quot; /&gt;&#10;            &lt;/LinearLayout&gt;&#10;        &lt;/com.google.android.material.card.MaterialCardView&gt;&#10;&#10;        &lt;!-- Owner Profile Section --&gt;&#10;        &lt;com.google.android.material.card.MaterialCardView&#10;            android:id=&quot;@+id/cardOwnerProfile&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_marginTop=&quot;16dp&quot;&#10;            app:cardCornerRadius=&quot;12dp&quot;&#10;            app:cardElevation=&quot;6dp&quot;&#10;            android:backgroundTint=&quot;@color/bb_primary&quot;&gt;&#10;&#10;            &lt;LinearLayout&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:orientation=&quot;horizontal&quot;&#10;                android:padding=&quot;16dp&quot;&gt;&#10;&#10;                &lt;ImageView&#10;                    android:layout_width=&quot;48dp&quot;&#10;                    android:layout_height=&quot;48dp&quot;&#10;                    android:src=&quot;@drawable/ic_profile&quot;&#10;                    android:contentDescription=&quot;Owner Profile Icon&quot;&#10;                    android:padding=&quot;8dp&quot; /&gt;&#10;&#10;                &lt;TextView&#10;                    android:layout_width=&quot;wrap_content&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:text=&quot;Owner Profile&quot;&#10;                    android:textSize=&quot;18sp&quot;&#10;                    android:textColor=&quot;@color/bb_on_primary&quot;&#10;                    android:layout_gravity=&quot;center_vertical&quot;&#10;                    android:paddingStart=&quot;16dp&quot; /&gt;&#10;            &lt;/LinearLayout&gt;&#10;        &lt;/com.google.android.material.card.MaterialCardView&gt;&#10;&#10;    &lt;/LinearLayout&gt;&#10;&lt;/ScrollView&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#13;&#10;&lt;ScrollView xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#13;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#13;&#10;    android:layout_width=&quot;match_parent&quot;&#13;&#10;    android:layout_height=&quot;match_parent&quot;&#13;&#10;    android:background=&quot;@color/bb_bg&quot;&#13;&#10;    android:padding=&quot;16dp&quot;&gt;&#13;&#10;&#13;&#10;    &lt;LinearLayout&#13;&#10;        android:layout_width=&quot;match_parent&quot;&#13;&#10;        android:layout_height=&quot;wrap_content&quot;&#13;&#10;        android:orientation=&quot;vertical&quot;&gt;&#13;&#10;&#13;&#10;        &lt;!-- Header --&gt;&#13;&#10;&#13;&#10;        &lt;!-- Properties Section --&gt;&#13;&#10;        &lt;com.google.android.material.card.MaterialCardView&#13;&#10;            android:id=&quot;@+id/cardProperties&quot;&#13;&#10;            android:layout_width=&quot;match_parent&quot;&#13;&#10;            android:layout_height=&quot;wrap_content&quot;&#13;&#10;            android:layout_marginTop=&quot;16dp&quot;&#13;&#10;            app:cardCornerRadius=&quot;12dp&quot;&#13;&#10;            app:cardElevation=&quot;6dp&quot;&#13;&#10;            android:backgroundTint=&quot;@color/card_blue&quot;&gt;&#13;&#10;&#13;&#10;            &lt;LinearLayout&#13;&#10;                android:layout_width=&quot;match_parent&quot;&#13;&#10;                android:layout_height=&quot;wrap_content&quot;&#13;&#10;                android:orientation=&quot;horizontal&quot;&#13;&#10;                android:padding=&quot;16dp&quot;&gt;&#13;&#10;&#13;&#10;                &lt;ImageView&#13;&#10;                    android:layout_width=&quot;48dp&quot;&#13;&#10;                    android:layout_height=&quot;48dp&quot;&#13;&#10;                    android:src=&quot;@drawable/ic_apartment&quot;&#13;&#10;                    android:contentDescription=&quot;Properties Icon&quot;&#13;&#10;                    android:padding=&quot;8dp&quot; /&gt;&#13;&#10;&#13;&#10;                &lt;TextView&#13;&#10;                    android:layout_width=&quot;wrap_content&quot;&#13;&#10;                    android:layout_height=&quot;wrap_content&quot;&#13;&#10;                    android:text=&quot;Properties&quot;&#13;&#10;                    android:textSize=&quot;18sp&quot;&#13;&#10;                    android:textColor=&quot;@color/bb_on_primary&quot;&#13;&#10;                    android:layout_gravity=&quot;center_vertical&quot;&#13;&#10;                    android:paddingStart=&quot;16dp&quot; /&gt;&#13;&#10;            &lt;/LinearLayout&gt;&#13;&#10;        &lt;/com.google.android.material.card.MaterialCardView&gt;&#13;&#10;&#13;&#10;        &lt;!-- Rent Check Section --&gt;&#13;&#10;        &lt;com.google.android.material.card.MaterialCardView&#13;&#10;            android:id=&quot;@+id/cardRentCheck&quot;&#13;&#10;            android:layout_width=&quot;match_parent&quot;&#13;&#10;            android:layout_height=&quot;wrap_content&quot;&#13;&#10;            android:layout_marginTop=&quot;16dp&quot;&#13;&#10;            app:cardCornerRadius=&quot;12dp&quot;&#13;&#10;            app:cardElevation=&quot;6dp&quot;&#13;&#10;            android:backgroundTint=&quot;@color/card_orange&quot;&gt;&#13;&#10;&#13;&#10;            &lt;LinearLayout&#13;&#10;                android:layout_width=&quot;match_parent&quot;&#13;&#10;                android:layout_height=&quot;wrap_content&quot;&#13;&#10;                android:orientation=&quot;horizontal&quot;&#13;&#10;                android:padding=&quot;16dp&quot;&gt;&#13;&#10;&#13;&#10;                &lt;ImageView&#13;&#10;                    android:layout_width=&quot;48dp&quot;&#13;&#10;                    android:layout_height=&quot;48dp&quot;&#13;&#10;                    android:src=&quot;@drawable/ic_rent&quot;&#13;&#10;                    android:contentDescription=&quot;Rent Icon&quot;&#13;&#10;                    android:padding=&quot;8dp&quot; /&gt;&#13;&#10;&#13;&#10;                &lt;TextView&#13;&#10;                    android:layout_width=&quot;wrap_content&quot;&#13;&#10;                    android:layout_height=&quot;wrap_content&quot;&#13;&#10;                    android:text=&quot;Rent Check&quot;&#13;&#10;                    android:textSize=&quot;18sp&quot;&#13;&#10;                    android:textColor=&quot;@color/bb_on_primary&quot;&#13;&#10;                    android:layout_gravity=&quot;center_vertical&quot;&#13;&#10;                    android:paddingStart=&quot;16dp&quot; /&gt;&#13;&#10;            &lt;/LinearLayout&gt;&#13;&#10;        &lt;/com.google.android.material.card.MaterialCardView&gt;&#13;&#10;&#13;&#10;        &lt;!-- Complaints Section --&gt;&#13;&#10;        &lt;com.google.android.material.card.MaterialCardView&#13;&#10;            android:id=&quot;@+id/cardComplaints&quot;&#13;&#10;            android:layout_width=&quot;match_parent&quot;&#13;&#10;            android:layout_height=&quot;wrap_content&quot;&#13;&#10;            android:layout_marginTop=&quot;16dp&quot;&#13;&#10;            app:cardCornerRadius=&quot;12dp&quot;&#13;&#10;            app:cardElevation=&quot;6dp&quot;&#13;&#10;            android:backgroundTint=&quot;@color/card_green&quot;&gt;&#13;&#10;&#13;&#10;            &lt;LinearLayout&#13;&#10;                android:layout_width=&quot;match_parent&quot;&#13;&#10;                android:layout_height=&quot;wrap_content&quot;&#13;&#10;                android:orientation=&quot;horizontal&quot;&#13;&#10;                android:padding=&quot;16dp&quot;&gt;&#13;&#10;&#13;&#10;                &lt;ImageView&#13;&#10;                    android:layout_width=&quot;48dp&quot;&#13;&#10;                    android:layout_height=&quot;48dp&quot;&#13;&#10;                    android:src=&quot;@drawable/ic_complaint&quot;&#13;&#10;                    android:contentDescription=&quot;Complaints Icon&quot;&#13;&#10;                    android:padding=&quot;8dp&quot; /&gt;&#13;&#10;&#13;&#10;                &lt;TextView&#13;&#10;                    android:layout_width=&quot;wrap_content&quot;&#13;&#10;                    android:layout_height=&quot;wrap_content&quot;&#13;&#10;                    android:text=&quot;Complaints&quot;&#13;&#10;                    android:textSize=&quot;18sp&quot;&#13;&#10;                    android:textColor=&quot;@color/bb_on_primary&quot;&#13;&#10;                    android:layout_gravity=&quot;center_vertical&quot;&#13;&#10;                    android:paddingStart=&quot;16dp&quot; /&gt;&#13;&#10;            &lt;/LinearLayout&gt;&#13;&#10;        &lt;/com.google.android.material.card.MaterialCardView&gt;&#13;&#10;&#13;&#10;        &lt;!-- Owner Profile Section --&gt;&#13;&#10;        &lt;com.google.android.material.card.MaterialCardView&#13;&#10;            android:id=&quot;@+id/cardOwnerProfile&quot;&#13;&#10;            android:layout_width=&quot;match_parent&quot;&#13;&#10;            android:layout_height=&quot;wrap_content&quot;&#13;&#10;            android:layout_marginTop=&quot;16dp&quot;&#13;&#10;            app:cardCornerRadius=&quot;12dp&quot;&#13;&#10;            app:cardElevation=&quot;6dp&quot;&#13;&#10;            android:backgroundTint=&quot;@color/bb_primary&quot;&gt;&#13;&#10;&#13;&#10;            &lt;LinearLayout&#13;&#10;                android:layout_width=&quot;match_parent&quot;&#13;&#10;                android:layout_height=&quot;wrap_content&quot;&#13;&#10;                android:orientation=&quot;horizontal&quot;&#13;&#10;                android:padding=&quot;16dp&quot;&gt;&#13;&#10;&#13;&#10;                &lt;ImageView&#13;&#10;                    android:layout_width=&quot;48dp&quot;&#13;&#10;                    android:layout_height=&quot;48dp&quot;&#13;&#10;                    android:src=&quot;@drawable/ic_profile&quot;&#13;&#10;                    android:contentDescription=&quot;Owner Profile Icon&quot;&#13;&#10;                    android:padding=&quot;8dp&quot; /&gt;&#13;&#10;&#13;&#10;                &lt;TextView&#13;&#10;                    android:layout_width=&quot;wrap_content&quot;&#13;&#10;                    android:layout_height=&quot;wrap_content&quot;&#13;&#10;                    android:text=&quot;Owner Profile&quot;&#13;&#10;                    android:textSize=&quot;18sp&quot;&#13;&#10;                    android:textColor=&quot;@color/bb_on_primary&quot;&#13;&#10;                    android:layout_gravity=&quot;center_vertical&quot;&#13;&#10;                    android:paddingStart=&quot;16dp&quot; /&gt;&#13;&#10;            &lt;/LinearLayout&gt;&#13;&#10;        &lt;/com.google.android.material.card.MaterialCardView&gt;&#13;&#10;&#13;&#10;        &lt;!-- Messages Section --&gt;&#13;&#10;        &lt;com.google.android.material.card.MaterialCardView&#13;&#10;            android:id=&quot;@+id/cardMessages&quot;&#13;&#10;            android:layout_width=&quot;match_parent&quot;&#13;&#10;            android:layout_height=&quot;wrap_content&quot;&#13;&#10;            android:layout_marginTop=&quot;16dp&quot;&#13;&#10;            app:cardCornerRadius=&quot;12dp&quot;&#13;&#10;            app:cardElevation=&quot;6dp&quot;&#13;&#10;            android:backgroundTint=&quot;@color/purple_500&quot;&gt;&#13;&#10;&#13;&#10;            &lt;LinearLayout&#13;&#10;                android:layout_width=&quot;match_parent&quot;&#13;&#10;                android:layout_height=&quot;wrap_content&quot;&#13;&#10;                android:orientation=&quot;horizontal&quot;&#13;&#10;                android:padding=&quot;16dp&quot;&gt;&#13;&#10;&#13;&#10;                &lt;ImageView&#13;&#10;                    android:layout_width=&quot;48dp&quot;&#13;&#10;                    android:layout_height=&quot;48dp&quot;&#13;&#10;                    android:src=&quot;@android:drawable/ic_dialog_email&quot;&#13;&#10;                    android:contentDescription=&quot;Messages Icon&quot;&#13;&#10;                    android:padding=&quot;8dp&quot;&#13;&#10;                    android:tint=&quot;@color/white&quot; /&gt;&#13;&#10;&#13;&#10;                &lt;TextView&#13;&#10;                    android:layout_width=&quot;wrap_content&quot;&#13;&#10;                    android:layout_height=&quot;wrap_content&quot;&#13;&#10;                    android:text=&quot;Messages&quot;&#13;&#10;                    android:textSize=&quot;18sp&quot;&#13;&#10;                    android:textColor=&quot;@color/bb_on_primary&quot;&#13;&#10;                    android:layout_gravity=&quot;center_vertical&quot;&#13;&#10;                    android:paddingStart=&quot;16dp&quot; /&gt;&#13;&#10;            &lt;/LinearLayout&gt;&#13;&#10;        &lt;/com.google.android.material.card.MaterialCardView&gt;&#13;&#10;&#13;&#10;    &lt;/LinearLayout&gt;&#13;&#10;&lt;/ScrollView&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/activity_tenant_chat.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/activity_tenant_chat.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    android:orientation=&quot;vertical&quot;&#10;    android:background=&quot;@color/bb_bg&quot;&gt;&#10;&#10;    &lt;TextView&#10;        android:text=&quot;Message Landlord&quot;&#10;        android:textColor=&quot;@color/white&quot;&#10;        android:textStyle=&quot;bold&quot;&#10;        android:textSize=&quot;20sp&quot;&#10;        android:padding=&quot;16dp&quot;&#10;        android:background=&quot;@color/bb_primary&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;/&gt;&#10;&#10;    &lt;androidx.recyclerview.widget.RecyclerView&#10;        android:id=&quot;@+id/rvMessages&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;0dp&quot;&#10;        android:layout_weight=&quot;1&quot;&#10;        android:padding=&quot;8dp&quot;&#10;        android:clipToPadding=&quot;false&quot;/&gt;&#10;&#10;    &lt;LinearLayout&#10;        android:orientation=&quot;horizontal&quot;&#10;        android:padding=&quot;8dp&quot;&#10;        android:background=&quot;@color/bb_card&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&gt;&#10;&#10;        &lt;EditText&#10;            android:id=&quot;@+id/etMessage&quot;&#10;            android:hint=&quot;Type your message...&quot;&#10;            android:textColor=&quot;@color/white&quot;&#10;            android:textColorHint=&quot;#999&quot;&#10;            android:background=&quot;@color/bb_outline&quot;&#10;            android:padding=&quot;12dp&quot;&#10;            android:layout_width=&quot;0dp&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_weight=&quot;1&quot;&#10;            android:layout_marginEnd=&quot;8dp&quot;/&gt;&#10;&#10;        &lt;Button&#10;            android:id=&quot;@+id/btnSend&quot;&#10;            android:text=&quot;Send&quot;&#10;            android:textColor=&quot;@color/bb_on_primary&quot;&#10;            android:backgroundTint=&quot;@color/bb_primary&quot;&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;/&gt;&#10;    &lt;/LinearLayout&gt;&#10;&#10;&lt;/LinearLayout&gt;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/activity_tenant_dashboard.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/activity_tenant_dashboard.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    android:orientation=&quot;vertical&quot;&#10;    android:padding=&quot;16dp&quot;&#10;    android:gravity=&quot;center_horizontal&quot;&#10;    android:background=&quot;@drawable/dashboard_gradient&quot;&gt;&#10;&#10;    &lt;!-- Title --&gt;&#10;&#10;    &lt;!-- Profile Card --&gt;&#10;    &lt;com.google.android.material.card.MaterialCardView&#10;        android:id=&quot;@+id/cardProfile&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_marginTop=&quot;16dp&quot;&#10;        app:cardCornerRadius=&quot;20dp&quot;&#10;        app:cardElevation=&quot;10dp&quot;&#10;        app:cardBackgroundColor=&quot;@color/card_blue&quot;&#10;        android:foreground=&quot;?attr/selectableItemBackground&quot;&gt;&#10;&#10;        &lt;LinearLayout&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:gravity=&quot;center_vertical&quot;&#10;            android:padding=&quot;18dp&quot;&#10;            android:orientation=&quot;horizontal&quot;&gt;&#10;&#10;            &lt;ImageView&#10;                android:layout_width=&quot;48dp&quot;&#10;                android:layout_height=&quot;48dp&quot;&#10;                android:src=&quot;@drawable/ic_profile&quot;&#10;                android:tint=&quot;@android:color/white&quot;&#10;                android:contentDescription=&quot;Profile&quot; /&gt;&#10;&#10;            &lt;TextView&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;My Profile&quot;&#10;                android:textSize=&quot;18sp&quot;&#10;                android:textStyle=&quot;bold&quot;&#10;                android:textColor=&quot;@android:color/white&quot;&#10;                android:paddingStart=&quot;16dp&quot;/&gt;&#10;        &lt;/LinearLayout&gt;&#10;    &lt;/com.google.android.material.card.MaterialCardView&gt;&#10;&#10;    &lt;!-- Complaints Card --&gt;&#10;    &lt;com.google.android.material.card.MaterialCardView&#10;        android:id=&quot;@+id/cardComplaints&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_marginTop=&quot;16dp&quot;&#10;        app:cardCornerRadius=&quot;20dp&quot;&#10;        app:cardElevation=&quot;10dp&quot;&#10;        app:cardBackgroundColor=&quot;@color/card_orange&quot;&#10;        android:foreground=&quot;?attr/selectableItemBackground&quot;&gt;&#10;&#10;        &lt;LinearLayout&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:gravity=&quot;center_vertical&quot;&#10;            android:padding=&quot;18dp&quot;&#10;            android:orientation=&quot;horizontal&quot;&gt;&#10;&#10;            &lt;ImageView&#10;                android:layout_width=&quot;48dp&quot;&#10;                android:layout_height=&quot;48dp&quot;&#10;                android:src=&quot;@drawable/ic_complaint&quot;&#10;                android:tint=&quot;@android:color/white&quot;&#10;                android:contentDescription=&quot;Complaints&quot; /&gt;&#10;&#10;            &lt;TextView&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;File / View Complaints&quot;&#10;                android:textSize=&quot;18sp&quot;&#10;                android:textStyle=&quot;bold&quot;&#10;                android:textColor=&quot;@android:color/white&quot;&#10;                android:paddingStart=&quot;16dp&quot;/&gt;&#10;        &lt;/LinearLayout&gt;&#10;    &lt;/com.google.android.material.card.MaterialCardView&gt;&#10;&#10;    &lt;!-- Directory Card --&gt;&#10;    &lt;com.google.android.material.card.MaterialCardView&#10;        android:id=&quot;@+id/cardDirectory&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_marginTop=&quot;16dp&quot;&#10;        app:cardCornerRadius=&quot;20dp&quot;&#10;        app:cardElevation=&quot;10dp&quot;&#10;        app:cardBackgroundColor=&quot;@color/card_green&quot;&#10;        android:foreground=&quot;?attr/selectableItemBackground&quot;&gt;&#10;&#10;        &lt;LinearLayout&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:gravity=&quot;center_vertical&quot;&#10;            android:padding=&quot;18dp&quot;&#10;            android:orientation=&quot;horizontal&quot;&gt;&#10;&#10;            &lt;ImageView&#10;                android:layout_width=&quot;48dp&quot;&#10;                android:layout_height=&quot;48dp&quot;&#10;                android:src=&quot;@drawable/ic_directory&quot;&#10;                android:tint=&quot;@android:color/white&quot;&#10;                android:contentDescription=&quot;Directory&quot; /&gt;&#10;&#10;            &lt;TextView&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;Building Directory&quot;&#10;                android:textSize=&quot;18sp&quot;&#10;                android:textStyle=&quot;bold&quot;&#10;                android:textColor=&quot;@android:color/white&quot;&#10;                android:paddingStart=&quot;16dp&quot;/&gt;&#10;        &lt;/LinearLayout&gt;&#10;    &lt;/com.google.android.material.card.MaterialCardView&gt;&#10;&#10;&lt;/LinearLayout&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#13;&#10;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#13;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#13;&#10;    android:layout_width=&quot;match_parent&quot;&#13;&#10;    android:layout_height=&quot;match_parent&quot;&#13;&#10;    android:orientation=&quot;vertical&quot;&#13;&#10;    android:padding=&quot;16dp&quot;&#13;&#10;    android:gravity=&quot;center_horizontal&quot;&#13;&#10;    android:background=&quot;@drawable/dashboard_gradient&quot;&gt;&#13;&#10;&#13;&#10;    &lt;!-- Title --&gt;&#13;&#10;&#13;&#10;    &lt;!-- Profile Card --&gt;&#13;&#10;    &lt;com.google.android.material.card.MaterialCardView&#13;&#10;        android:id=&quot;@+id/cardProfile&quot;&#13;&#10;        android:layout_width=&quot;match_parent&quot;&#13;&#10;        android:layout_height=&quot;wrap_content&quot;&#13;&#10;        android:layout_marginTop=&quot;16dp&quot;&#13;&#10;        app:cardCornerRadius=&quot;20dp&quot;&#13;&#10;        app:cardElevation=&quot;10dp&quot;&#13;&#10;        app:cardBackgroundColor=&quot;@color/card_blue&quot;&#13;&#10;        android:foreground=&quot;?attr/selectableItemBackground&quot;&gt;&#13;&#10;&#13;&#10;        &lt;LinearLayout&#13;&#10;            android:layout_width=&quot;match_parent&quot;&#13;&#10;            android:layout_height=&quot;wrap_content&quot;&#13;&#10;            android:gravity=&quot;center_vertical&quot;&#13;&#10;            android:padding=&quot;18dp&quot;&#13;&#10;            android:orientation=&quot;horizontal&quot;&gt;&#13;&#10;&#13;&#10;            &lt;ImageView&#13;&#10;                android:layout_width=&quot;48dp&quot;&#13;&#10;                android:layout_height=&quot;48dp&quot;&#13;&#10;                android:src=&quot;@drawable/ic_profile&quot;&#13;&#10;                android:tint=&quot;@android:color/white&quot;&#13;&#10;                android:contentDescription=&quot;Profile&quot; /&gt;&#13;&#10;&#13;&#10;            &lt;TextView&#13;&#10;                android:layout_width=&quot;wrap_content&quot;&#13;&#10;                android:layout_height=&quot;wrap_content&quot;&#13;&#10;                android:text=&quot;My Profile&quot;&#13;&#10;                android:textSize=&quot;18sp&quot;&#13;&#10;                android:textStyle=&quot;bold&quot;&#13;&#10;                android:textColor=&quot;@android:color/white&quot;&#13;&#10;                android:paddingStart=&quot;16dp&quot;/&gt;&#13;&#10;        &lt;/LinearLayout&gt;&#13;&#10;    &lt;/com.google.android.material.card.MaterialCardView&gt;&#13;&#10;&#13;&#10;    &lt;!-- Complaints Card --&gt;&#13;&#10;    &lt;com.google.android.material.card.MaterialCardView&#13;&#10;        android:id=&quot;@+id/cardComplaints&quot;&#13;&#10;        android:layout_width=&quot;match_parent&quot;&#13;&#10;        android:layout_height=&quot;wrap_content&quot;&#13;&#10;        android:layout_marginTop=&quot;16dp&quot;&#13;&#10;        app:cardCornerRadius=&quot;20dp&quot;&#13;&#10;        app:cardElevation=&quot;10dp&quot;&#13;&#10;        app:cardBackgroundColor=&quot;@color/card_orange&quot;&#13;&#10;        android:foreground=&quot;?attr/selectableItemBackground&quot;&gt;&#13;&#10;&#13;&#10;        &lt;LinearLayout&#13;&#10;            android:layout_width=&quot;match_parent&quot;&#13;&#10;            android:layout_height=&quot;wrap_content&quot;&#13;&#10;            android:gravity=&quot;center_vertical&quot;&#13;&#10;            android:padding=&quot;18dp&quot;&#13;&#10;            android:orientation=&quot;horizontal&quot;&gt;&#13;&#10;&#13;&#10;            &lt;ImageView&#13;&#10;                android:layout_width=&quot;48dp&quot;&#13;&#10;                android:layout_height=&quot;48dp&quot;&#13;&#10;                android:src=&quot;@drawable/ic_complaint&quot;&#13;&#10;                android:tint=&quot;@android:color/white&quot;&#13;&#10;                android:contentDescription=&quot;Complaints&quot; /&gt;&#13;&#10;&#13;&#10;            &lt;TextView&#13;&#10;                android:layout_width=&quot;wrap_content&quot;&#13;&#10;                android:layout_height=&quot;wrap_content&quot;&#13;&#10;                android:text=&quot;File / View Complaints&quot;&#13;&#10;                android:textSize=&quot;18sp&quot;&#13;&#10;                android:textStyle=&quot;bold&quot;&#13;&#10;                android:textColor=&quot;@android:color/white&quot;&#13;&#10;                android:paddingStart=&quot;16dp&quot;/&gt;&#13;&#10;        &lt;/LinearLayout&gt;&#13;&#10;    &lt;/com.google.android.material.card.MaterialCardView&gt;&#13;&#10;&#13;&#10;    &lt;!-- Directory Card --&gt;&#13;&#10;    &lt;com.google.android.material.card.MaterialCardView&#13;&#10;        android:id=&quot;@+id/cardDirectory&quot;&#13;&#10;        android:layout_width=&quot;match_parent&quot;&#13;&#10;        android:layout_height=&quot;wrap_content&quot;&#13;&#10;        android:layout_marginTop=&quot;16dp&quot;&#13;&#10;        app:cardCornerRadius=&quot;20dp&quot;&#13;&#10;        app:cardElevation=&quot;10dp&quot;&#13;&#10;        app:cardBackgroundColor=&quot;@color/card_green&quot;&#13;&#10;        android:foreground=&quot;?attr/selectableItemBackground&quot;&gt;&#13;&#10;&#13;&#10;        &lt;LinearLayout&#13;&#10;            android:layout_width=&quot;match_parent&quot;&#13;&#10;            android:layout_height=&quot;wrap_content&quot;&#13;&#10;            android:gravity=&quot;center_vertical&quot;&#13;&#10;            android:padding=&quot;18dp&quot;&#13;&#10;            android:orientation=&quot;horizontal&quot;&gt;&#13;&#10;&#13;&#10;            &lt;ImageView&#13;&#10;                android:layout_width=&quot;48dp&quot;&#13;&#10;                android:layout_height=&quot;48dp&quot;&#13;&#10;                android:src=&quot;@drawable/ic_directory&quot;&#13;&#10;                android:tint=&quot;@android:color/white&quot;&#13;&#10;                android:contentDescription=&quot;Directory&quot; /&gt;&#13;&#10;&#13;&#10;            &lt;TextView&#13;&#10;                android:layout_width=&quot;wrap_content&quot;&#13;&#10;                android:layout_height=&quot;wrap_content&quot;&#13;&#10;                android:text=&quot;Building Directory&quot;&#13;&#10;                android:textSize=&quot;18sp&quot;&#13;&#10;                android:textStyle=&quot;bold&quot;&#13;&#10;                android:textColor=&quot;@android:color/white&quot;&#13;&#10;                android:paddingStart=&quot;16dp&quot;/&gt;&#13;&#10;        &lt;/LinearLayout&gt;&#13;&#10;    &lt;/com.google.android.material.card.MaterialCardView&gt;&#13;&#10;&#13;&#10;    &lt;!-- Message Landlord Card --&gt;&#13;&#10;    &lt;com.google.android.material.card.MaterialCardView&#13;&#10;        android:id=&quot;@+id/cardMessageLandlord&quot;&#13;&#10;        android:layout_width=&quot;match_parent&quot;&#13;&#10;        android:layout_height=&quot;wrap_content&quot;&#13;&#10;        android:layout_marginTop=&quot;16dp&quot;&#13;&#10;        app:cardCornerRadius=&quot;20dp&quot;&#13;&#10;        app:cardElevation=&quot;10dp&quot;&#13;&#10;        app:cardBackgroundColor=&quot;@color/purple_500&quot;&#13;&#10;        android:foreground=&quot;?attr/selectableItemBackground&quot;&gt;&#13;&#10;&#13;&#10;        &lt;LinearLayout&#13;&#10;            android:layout_width=&quot;match_parent&quot;&#13;&#10;            android:layout_height=&quot;wrap_content&quot;&#13;&#10;            android:gravity=&quot;center_vertical&quot;&#13;&#10;            android:padding=&quot;18dp&quot;&#13;&#10;            android:orientation=&quot;horizontal&quot;&gt;&#13;&#10;&#13;&#10;            &lt;ImageView&#13;&#10;                android:layout_width=&quot;48dp&quot;&#13;&#10;                android:layout_height=&quot;48dp&quot;&#13;&#10;                android:src=&quot;@android:drawable/ic_dialog_email&quot;&#13;&#10;                android:tint=&quot;@android:color/white&quot;&#13;&#10;                android:contentDescription=&quot;Message Landlord&quot; /&gt;&#13;&#10;&#13;&#10;            &lt;TextView&#13;&#10;                android:layout_width=&quot;wrap_content&quot;&#13;&#10;                android:layout_height=&quot;wrap_content&quot;&#13;&#10;                android:text=&quot;Message Landlord&quot;&#13;&#10;                android:textSize=&quot;18sp&quot;&#13;&#10;                android:textStyle=&quot;bold&quot;&#13;&#10;                android:textColor=&quot;@android:color/white&quot;&#13;&#10;                android:paddingStart=&quot;16dp&quot;/&gt;&#13;&#10;        &lt;/LinearLayout&gt;&#13;&#10;    &lt;/com.google.android.material.card.MaterialCardView&gt;&#13;&#10;&#13;&#10;&lt;/LinearLayout&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/item_message.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/item_message.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;wrap_content&quot;&#10;    android:orientation=&quot;vertical&quot;&#10;    android:padding=&quot;8dp&quot;&gt;&#10;&#10;    &lt;!-- Sent message (right aligned) --&gt;&#10;    &lt;LinearLayout&#10;        android:id=&quot;@+id/layoutSent&quot;&#10;        android:orientation=&quot;vertical&quot;&#10;        android:layout_gravity=&quot;end&quot;&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:maxWidth=&quot;260dp&quot;&#10;        android:background=&quot;@color/bb_primary&quot;&#10;        android:padding=&quot;12dp&quot;&#10;        android:layout_marginStart=&quot;60dp&quot;&#10;        android:visibility=&quot;gone&quot;&gt;&#10;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/tvSentMessage&quot;&#10;            android:textColor=&quot;@color/white&quot;&#10;            android:textSize=&quot;14sp&quot;&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;/&gt;&#10;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/tvSentTime&quot;&#10;            android:textColor=&quot;#CCC&quot;&#10;            android:textSize=&quot;10sp&quot;&#10;            android:layout_marginTop=&quot;4dp&quot;&#10;            android:layout_gravity=&quot;end&quot;&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;/&gt;&#10;    &lt;/LinearLayout&gt;&#10;&#10;    &lt;!-- Received message (left aligned) --&gt;&#10;    &lt;LinearLayout&#10;        android:id=&quot;@+id/layoutReceived&quot;&#10;        android:orientation=&quot;vertical&quot;&#10;        android:layout_gravity=&quot;start&quot;&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:maxWidth=&quot;260dp&quot;&#10;        android:background=&quot;@color/bb_card&quot;&#10;        android:padding=&quot;12dp&quot;&#10;        android:layout_marginEnd=&quot;60dp&quot;&#10;        android:visibility=&quot;gone&quot;&gt;&#10;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/tvReceivedMessage&quot;&#10;            android:textColor=&quot;@color/white&quot;&#10;            android:textSize=&quot;14sp&quot;&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;/&gt;&#10;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/tvReceivedTime&quot;&#10;            android:textColor=&quot;#999&quot;&#10;            android:textSize=&quot;10sp&quot;&#10;            android:layout_marginTop=&quot;4dp&quot;&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;/&gt;&#10;    &lt;/LinearLayout&gt;&#10;&#10;&lt;/LinearLayout&gt;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/item_tenant_message.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/item_tenant_message.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;com.google.android.material.card.MaterialCardView&#10;    xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;wrap_content&quot;&#10;    android:layout_margin=&quot;4dp&quot;&#10;    app:cardBackgroundColor=&quot;@color/bb_card&quot;&#10;    app:cardCornerRadius=&quot;8dp&quot;&#10;    app:cardElevation=&quot;2dp&quot;&#10;    app:strokeColor=&quot;@color/bb_outline&quot;&#10;    app:strokeWidth=&quot;1dp&quot;&gt;&#10;&#10;    &lt;LinearLayout&#10;        android:orientation=&quot;horizontal&quot;&#10;        android:padding=&quot;16dp&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:gravity=&quot;center_vertical&quot;&gt;&#10;&#10;        &lt;ImageView&#10;            android:src=&quot;@android:drawable/ic_dialog_email&quot;&#10;            android:layout_width=&quot;40dp&quot;&#10;            android:layout_height=&quot;40dp&quot;&#10;            android:padding=&quot;8dp&quot;&#10;            android:tint=&quot;@color/bb_primary&quot;&#10;            android:background=&quot;@color/bb_outline&quot;&#10;            android:layout_marginEnd=&quot;12dp&quot;/&gt;&#10;&#10;        &lt;LinearLayout&#10;            android:orientation=&quot;vertical&quot;&#10;            android:layout_width=&quot;0dp&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_weight=&quot;1&quot;&gt;&#10;&#10;            &lt;TextView&#10;                android:id=&quot;@+id/tvTenantName&quot;&#10;                android:textColor=&quot;@color/white&quot;&#10;                android:textStyle=&quot;bold&quot;&#10;                android:textSize=&quot;16sp&quot;&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;/&gt;&#10;&#10;            &lt;TextView&#10;                android:id=&quot;@+id/tvLastMessage&quot;&#10;                android:textColor=&quot;#999&quot;&#10;                android:textSize=&quot;12sp&quot;&#10;                android:maxLines=&quot;1&quot;&#10;                android:ellipsize=&quot;end&quot;&#10;                android:layout_marginTop=&quot;4dp&quot;&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;/&gt;&#10;        &lt;/LinearLayout&gt;&#10;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/tvUnreadCount&quot;&#10;            android:textColor=&quot;@color/white&quot;&#10;            android:textSize=&quot;12sp&quot;&#10;            android:background=&quot;@color/card_orange&quot;&#10;            android:padding=&quot;6dp&quot;&#10;            android:minWidth=&quot;24dp&quot;&#10;            android:gravity=&quot;center&quot;&#10;            android:visibility=&quot;gone&quot;&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;/&gt;&#10;&#10;    &lt;/LinearLayout&gt;&#10;&#10;&lt;/com.google.android.material.card.MaterialCardView&gt;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>